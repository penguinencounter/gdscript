<?php

$files = [];
$classes = scandir("./godot-master/doc/classes");
foreach ($classes as $filename) {
    $files[] = sprintf("./godot-master/doc/classes/%s", $filename);
}

// Search modules
$modules = scandir("./godot-master/modules");

foreach ($modules as $module) {
    //$files[] = sprintf("./classes/%s", $filename);
    $modulePath = sprintf("./godot-master/modules/%s", $module);
    if (substr($module, 0, 1) == ".") continue;

    if (is_dir($modulePath)) {
        $modulePath = sprintf("%s/doc_classes", $modulePath);
        if (is_dir($modulePath)) {
            $classes = scandir($modulePath);
            foreach ($classes as $filename) {
                $files[] = sprintf("%s/%s", $modulePath, $filename);
            }
        }
    }
}

$target = "../src/main/kotlin/gdscript/utils/GdOperand.kt";

$baseContent = "package gdscript.utils

import com.jetbrains.rd.util.firstOrNull
import gdscript.GdKeywords

/**
 * Do not edit manually
 * Generated by operandParser.php
 */
object GdOperand {

    fun getReturnType(left: String, right: String, operator: String): String {
        if (operator == \"[]\" && left.startsWith(\"Array[\")) return left.removePrefix(\"Array[\").removeSuffix(\"]\")
        val operated = OPERANDS.get(left)?.get(parseOperator(operator)) ?: return \"\"
        val typed = operated.get(right)
        if (typed == null && operator == \"[]\") {
            return operated.firstOrNull()?.value ?: \"\"
        }

        return \"\"
    }

    fun isAllowed(left: String, right: String, operator: String): Boolean {
        val operated = OPERANDS[left]?.get(parseOperator(operator)) ?: return false
        return operated.containsKey(right) || operated.containsKey(GdKeywords.VARIANT)
    }

    private fun parseOperator(operator: String): String {
        for (prefix in TO_TRIM) {
            if (operator == \"\$prefix=\") {
                return prefix
            }
        }

        return operator
    }

    val TO_TRIM = arrayOf(\"+\", \"-\", \"*\", \"/\", \"**\", \"%%\", \"&\", \"|\", \"^\", \"<<\", \">>\")

    // Left -> Operand -> Right -> Result
    val OPERANDS = mapOf(
%s
    )

}
";

$operators      = [];
$operatorPrefix = strlen("operator ");
foreach ($files as $filepath) {
    $paths = explode("/", $filepath);
    $filename = $paths[count($paths) - 1];

    if ($filename == "." || $filename == "..") continue;
    if (substr($filename, strlen($filename) - 4) != ".xml") continue;

    $data       = "";
    $class_name = substr($filename, 0, strlen($filename) - 4);
    if (substr($class_name, 0, 1) == "@") continue;

    $content = file_get_contents($filepath);
    $xml     = (array)simplexml_load_string($content);

    foreach ($xml['operators'] ?? [] as $value) {
        $value = (array)$value;
        $att   = (array)$value['@attributes'];

        $operator = substr($att['name'], $operatorPrefix);
        if (strpos($operator, "unary") !== false) continue;
        if ($operator == '~') continue;

        $return     = ((array)((array)($value['return']))['@attributes'])['type'];
        $rightParam = ((array)((array)($value['param']))['@attributes'])['type'];

        $operators[$class_name][$operator][$rightParam] = $return;
    }

}

$parsed = "";
foreach ($operators as $left => $operator) {
    $parsed .= sprintf("        \"%s\" to mapOf(\n", $left);
    foreach ($operator as $operand => $operands) {
        $parsed .= sprintf("            \"%s\" to mapOf(", $operand);

        if (count($operands) > 1) {
            $parsed .= "\n";
            foreach ($operands as $right => $result) {
                $parsed .= sprintf("                \"%s\" to \"%s\",\n", $right, $result);
            }
            $parsed .= "            ";
        } else {
            foreach ($operands as $right => $result) {
                $parsed .= sprintf('"%s" to "%s"', $right, $result);
            }
        }

        $parsed .= "),\n";
    }
    $parsed .= "        ),\n";
}

file_put_contents($target, sprintf($baseContent, $parsed));
