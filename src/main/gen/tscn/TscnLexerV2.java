// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: TscnV2.flex

package tscn;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import tscn.psi.TscnTypes;

import java.util.Stack;


class TscnLexerV2 implements FlexLexer {
 /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DATA_LINE = 2;
  public static final int HEADER = 4;
  public static final int HEADER_ATTRIBUTES = 6;
  public static final int HEADER_ATTR = 8;
  public static final int HEADER_ATTR_VALUE = 10;
  public static final int GODOT_OBJECT = 12;
  public static final int GODOT_MEMBER_REF = 14;
  public static final int DATA_VALUE = 16;
  public static final int JSON_OBJECT = 18;
  public static final int JSON_OBJECT_ELEM = 20;
  public static final int JSON_ARRAY = 22;
  public static final int JSON_VALUE = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\4\1\0"+
    "\1\5\3\0\1\6\1\0\1\7\1\10\2\0\1\11"+
    "\1\12\1\13\1\14\12\12\1\15\1\16\1\0\1\17"+
    "\3\0\32\12\1\20\1\0\1\21\1\0\1\22\1\0"+
    "\2\12\1\23\1\24\1\25\1\12\1\26\1\12\1\27"+
    "\4\12\1\30\1\31\2\12\1\32\1\33\1\34\1\35"+
    "\2\12\1\36\2\12\1\37\1\12\1\40\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\5\14\1\15\1\16"+
    "\1\17\1\20\1\1\1\21\1\22\1\23\1\24\1\25"+
    "\1\10\2\1\1\26\1\27\1\30\1\31\1\32\1\10"+
    "\1\33\1\34\1\1\1\35\1\36\1\37\1\40\2\4"+
    "\1\0\1\41\1\42\4\14\1\0\1\43\1\44\1\21"+
    "\1\0\1\45\1\0\1\46\1\47\1\0\1\50\1\51"+
    "\1\36\7\14\1\52\13\14\1\53\2\14\1\54\2\14"+
    "\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u0108\0\u01ad\0\u0108"+
    "\0\u01ce\0\u01ef\0\u0108\0\u0108\0\u0210\0\u0108\0\u0231\0\u0108"+
    "\0\u0108\0\u0108\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02d6\0\u02f7"+
    "\0\u0108\0\u0318\0\u0108\0\u0339\0\u035a\0\u0108\0\u0108\0\u0108"+
    "\0\u0108\0\u037b\0\u039c\0\u03bd\0\u0108\0\u0108\0\u0108\0\u0108"+
    "\0\u0108\0\u03de\0\u0108\0\u0108\0\u03ff\0\u0108\0\u0420\0\u0108"+
    "\0\u0108\0\u0108\0\u0441\0\u0210\0\u0108\0\u0108\0\u0462\0\u0483"+
    "\0\u04a4\0\u04c5\0\u0339\0\u0108\0\u0108\0\u04e6\0\u039c\0\u0108"+
    "\0\u03bd\0\u0108\0\u0108\0\u03ff\0\u0108\0\u0108\0\u0507\0\u0528"+
    "\0\u0549\0\u056a\0\u058b\0\u05ac\0\u05cd\0\u05ee\0\u0252\0\u060f"+
    "\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4\0\u06d5\0\u06f6\0\u0717"+
    "\0\u0738\0\u0759\0\u0252\0\u077a\0\u079b\0\u0252\0\u07bc\0\u07dd"+
    "\0\u0252";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\2\20\1\17\5\16\1\21\3\16\1\22"+
    "\1\16\1\23\1\16\15\21\3\16\1\17\2\24\1\17"+
    "\1\25\1\26\3\16\1\27\4\16\1\30\1\31\1\16"+
    "\15\27\1\32\13\16\1\33\7\16\1\33\1\34\1\33"+
    "\1\35\1\36\1\33\1\37\6\33\3\16\1\17\2\16"+
    "\1\17\5\16\1\40\6\16\1\41\15\40\3\16\1\42"+
    "\2\16\1\42\12\16\1\43\22\16\1\42\2\16\1\42"+
    "\1\44\4\16\1\45\7\16\15\45\3\16\1\17\2\16"+
    "\1\17\1\25\1\46\1\47\1\50\1\51\1\52\7\16"+
    "\15\52\7\16\1\53\33\16\41\0\1\16\1\17\2\20"+
    "\1\17\1\54\3\16\1\51\26\16\1\55\1\16\1\17"+
    "\2\20\1\17\4\16\1\56\3\16\1\57\22\16\1\60"+
    "\1\16\1\17\2\20\1\17\1\25\1\61\2\16\1\51"+
    "\1\62\6\16\1\63\15\62\1\64\2\16\1\17\2\20"+
    "\1\17\1\65\1\66\3\16\1\67\5\16\1\70\1\16"+
    "\15\67\1\71\1\16\1\0\1\17\2\0\1\17\34\0"+
    "\2\21\3\0\12\21\1\0\21\21\2\22\1\72\1\73"+
    "\35\22\2\74\2\0\1\74\1\75\33\74\7\0\1\76"+
    "\2\0\1\27\1\52\6\0\15\27\14\0\1\33\1\0"+
    "\1\33\5\0\15\33\14\0\1\33\1\0\1\33\5\0"+
    "\7\33\1\77\5\33\14\0\1\33\1\0\1\33\5\0"+
    "\14\33\1\100\14\0\1\33\1\0\1\33\5\0\2\33"+
    "\1\101\12\33\14\0\1\33\1\0\1\33\5\0\7\33"+
    "\1\102\5\33\14\0\1\40\1\0\1\40\5\0\15\40"+
    "\3\0\1\42\2\0\1\42\34\0\2\103\2\0\1\103"+
    "\1\104\33\103\7\0\1\105\2\0\1\45\1\106\6\0"+
    "\15\45\14\0\2\52\6\0\15\52\2\0\2\107\2\0"+
    "\1\107\1\110\33\107\2\111\2\0\1\111\1\112\33\111"+
    "\7\0\1\113\2\0\1\62\1\52\6\0\15\62\2\0"+
    "\2\114\2\0\1\114\1\115\33\114\7\0\1\116\2\0"+
    "\1\67\1\117\6\0\15\67\4\0\1\72\50\0\1\33"+
    "\1\0\1\33\5\0\6\33\1\120\6\33\14\0\1\33"+
    "\1\0\1\33\5\0\12\33\1\121\2\33\14\0\1\33"+
    "\1\0\1\33\5\0\1\122\14\33\14\0\1\33\1\0"+
    "\1\33\5\0\2\33\1\123\12\33\14\0\2\106\6\0"+
    "\15\106\14\0\2\117\6\0\15\117\14\0\1\33\1\0"+
    "\1\33\5\0\6\33\1\124\6\33\14\0\1\33\1\0"+
    "\1\33\5\0\1\125\14\33\14\0\1\33\1\0\1\33"+
    "\5\0\11\33\1\126\3\33\14\0\1\33\1\0\1\33"+
    "\5\0\3\33\1\127\11\33\14\0\1\33\1\0\1\33"+
    "\5\0\3\33\1\130\11\33\14\0\1\33\1\0\1\33"+
    "\5\0\10\33\1\131\4\33\14\0\1\33\1\0\1\33"+
    "\5\0\1\33\1\132\13\33\14\0\1\33\1\0\1\33"+
    "\5\0\1\33\1\133\13\33\14\0\1\33\1\0\1\33"+
    "\5\0\3\33\1\134\11\33\14\0\1\33\1\0\1\33"+
    "\5\0\3\33\1\135\11\33\14\0\1\33\1\0\1\33"+
    "\5\0\12\33\1\136\2\33\14\0\1\33\1\0\1\33"+
    "\5\0\11\33\1\137\3\33\14\0\1\33\1\0\1\33"+
    "\5\0\6\33\1\140\6\33\14\0\1\33\1\0\1\33"+
    "\5\0\5\33\1\141\7\33\14\0\1\33\1\0\1\33"+
    "\5\0\7\33\1\142\5\33\14\0\1\33\1\0\1\33"+
    "\5\0\3\33\1\143\11\33\14\0\1\33\1\0\1\33"+
    "\5\0\7\33\1\144\5\33\14\0\1\33\1\0\1\33"+
    "\5\0\13\33\1\145\1\33\14\0\1\33\1\0\1\33"+
    "\5\0\6\33\1\146\6\33\14\0\1\33\1\0\1\33"+
    "\5\0\10\33\1\147\4\33\14\0\1\33\1\0\1\33"+
    "\5\0\1\33\1\150\13\33\14\0\1\33\1\0\1\33"+
    "\5\0\3\33\1\151\11\33\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2046];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\10\4\0\1\11\1\1\1\11\2\1\2\11"+
    "\1\1\1\11\1\1\3\11\6\1\1\11\1\1\1\11"+
    "\2\1\4\11\3\1\5\11\1\1\2\11\1\1\1\11"+
    "\1\1\3\11\1\1\1\0\2\11\4\1\1\0\2\11"+
    "\1\1\1\0\1\11\1\0\2\11\1\0\2\11\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    Stack<Integer> nestedStates = new Stack<>();

    private IElementType determineStringType(CharSequence text) {
        if (text.length() >= 8 && text.subSequence(0, 7).equals("\"res://")) {
            return TscnTypes.RES_STRING_VALUE;
        }
        return TscnTypes.STRING_VALUE;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TscnLexerV2(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TscnTypes.BAD_CHARACTER;
            }
          // fall through
          case 46: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 47: break;
          case 3:
            { yybegin(DATA_LINE); nestedStates.clear(); return TscnTypes.DATA_LINE_NM;
            }
          // fall through
          case 48: break;
          case 4:
            { return TscnTypes.COMMENT;
            }
          // fall through
          case 49: break;
          case 5:
            { yybegin(HEADER); nestedStates.clear(); return TscnTypes.LSBR;
            }
          // fall through
          case 50: break;
          case 6:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 51: break;
          case 7:
            { yybegin(GODOT_MEMBER_REF); nestedStates.push(DATA_LINE); return TscnTypes.AMPERSAND;
            }
          // fall through
          case 52: break;
          case 8:
            { return TscnTypes.VALUE;
            }
          // fall through
          case 53: break;
          case 9:
            { return TscnTypes.EQ;
            }
          // fall through
          case 54: break;
          case 10:
            { yybegin(JSON_ARRAY); nestedStates.push(DATA_LINE); return TscnTypes.LSBR;
            }
          // fall through
          case 55: break;
          case 11:
            { yybegin(JSON_OBJECT); nestedStates.push(DATA_LINE); return TscnTypes.LCBR;
            }
          // fall through
          case 56: break;
          case 12:
            { yybegin(HEADER_ATTRIBUTES); return TscnTypes.UNKNOWN;
            }
          // fall through
          case 57: break;
          case 13:
            { yybegin(HEADER_ATTR); return TscnTypes.HEADER_VALUE_NM;
            }
          // fall through
          case 58: break;
          case 14:
            { yybegin(YYINITIAL); return TscnTypes.RSBR;
            }
          // fall through
          case 59: break;
          case 15:
            { yybegin(HEADER_ATTRIBUTES); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 60: break;
          case 16:
            { yybegin(HEADER_ATTR_VALUE); return TscnTypes.EQ;
            }
          // fall through
          case 61: break;
          case 17:
            { yybegin(HEADER_ATTRIBUTES); return TscnTypes.VALUE;
            }
          // fall through
          case 62: break;
          case 18:
            { yybegin(GODOT_MEMBER_REF); nestedStates.push(GODOT_OBJECT); return TscnTypes.AMPERSAND;
            }
          // fall through
          case 63: break;
          case 19:
            { return TscnTypes.LP;
            }
          // fall through
          case 64: break;
          case 20:
            { yybegin(nestedStates.pop()); return TscnTypes.RP;
            }
          // fall through
          case 65: break;
          case 21:
            { return TscnTypes.COMMA;
            }
          // fall through
          case 66: break;
          case 22:
            { yybegin(nestedStates.pop()); return TscnTypes.RCBR;
            }
          // fall through
          case 67: break;
          case 23:
            { yybegin(nestedStates.pop()); return TscnTypes.COMMA;
            }
          // fall through
          case 68: break;
          case 24:
            { nestedStates.push(JSON_OBJECT_ELEM); yybegin(JSON_VALUE); return TscnTypes.COLON;
            }
          // fall through
          case 69: break;
          case 25:
            { nestedStates.pop(); yybegin(nestedStates.pop()); return TscnTypes.RCBR;
            }
          // fall through
          case 70: break;
          case 26:
            { yybegin(GODOT_MEMBER_REF); nestedStates.push(JSON_ARRAY); return TscnTypes.AMPERSAND;
            }
          // fall through
          case 71: break;
          case 27:
            { yybegin(nestedStates.pop()); return TscnTypes.RSBR;
            }
          // fall through
          case 72: break;
          case 28:
            { nestedStates.push(JSON_ARRAY); yybegin(JSON_OBJECT); return TscnTypes.LCBR;
            }
          // fall through
          case 73: break;
          case 29:
            { yybegin(GODOT_MEMBER_REF); return TscnTypes.AMPERSAND;
            }
          // fall through
          case 74: break;
          case 30:
            { yybegin(nestedStates.pop()); return TscnTypes.VALUE;
            }
          // fall through
          case 75: break;
          case 31:
            { yybegin(JSON_ARRAY); return TscnTypes.LSBR;
            }
          // fall through
          case 76: break;
          case 32:
            { yybegin(JSON_OBJECT); return TscnTypes.LCBR;
            }
          // fall through
          case 77: break;
          case 33:
            { return determineStringType(yytext());
            }
          // fall through
          case 78: break;
          case 34:
            { nestedStates.push(DATA_LINE); yypushback(1); yybegin(GODOT_OBJECT); return TscnTypes.GODOT_CLASS_REF;
            }
          // fall through
          case 79: break;
          case 35:
            { yybegin(HEADER_ATTRIBUTES); return determineStringType(yytext());
            }
          // fall through
          case 80: break;
          case 36:
            { nestedStates.push(HEADER_ATTRIBUTES); yypushback(1); yybegin(GODOT_OBJECT); return TscnTypes.GODOT_CLASS_REF;
            }
          // fall through
          case 81: break;
          case 37:
            { yybegin(nestedStates.pop()); return TscnTypes.GODOT_MEMBER_REF;
            }
          // fall through
          case 82: break;
          case 38:
            { nestedStates.push(JSON_OBJECT); yybegin(JSON_OBJECT_ELEM); return TscnTypes.STRING_VALUE;
            }
          // fall through
          case 83: break;
          case 39:
            { nestedStates.push(JSON_ARRAY); yypushback(1); yybegin(GODOT_OBJECT); return TscnTypes.GODOT_CLASS_REF;
            }
          // fall through
          case 84: break;
          case 40:
            { yybegin(nestedStates.pop()); return determineStringType(yytext());
            }
          // fall through
          case 85: break;
          case 41:
            { yypushback(1); yybegin(GODOT_OBJECT); return TscnTypes.GODOT_CLASS_REF;
            }
          // fall through
          case 86: break;
          case 42:
            { yybegin(HEADER_ATTRIBUTES); return TscnTypes.NODE;
            }
          // fall through
          case 87: break;
          case 43:
            { yybegin(HEADER_ATTRIBUTES); return TscnTypes.GD_SCENE;
            }
          // fall through
          case 88: break;
          case 44:
            { yybegin(HEADER_ATTRIBUTES); return TscnTypes.CONNECTION;
            }
          // fall through
          case 89: break;
          case 45:
            { yybegin(HEADER_ATTRIBUTES); return TscnTypes.EXT_RESOURCE;
            }
          // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
