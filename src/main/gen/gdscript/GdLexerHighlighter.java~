/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package gdscript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import gdscript.psi.GdTokenType;
import gdscript.psi.GdTypes;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>GdHighlight.flex</tt>
 */
class GdLexerHighlighter implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\3\2\21\1\3\22\0\1\4\1\42\1\17\1\26\1\32\1\33\1\16\1\22\1\70\1"+
    "\71\1\37\1\35\1\66\1\15\1\6\1\34\1\7\1\13\10\2\1\25\1\67\1\40\1\36\1\41\1"+
    "\23\1\27\6\11\24\30\1\72\1\20\1\73\1\31\1\5\1\0\1\50\1\12\1\46\1\45\1\14\1"+
    "\57\1\55\1\64\1\61\1\30\1\62\1\47\1\51\1\44\1\54\1\60\1\30\1\53\1\24\1\43"+
    "\1\56\1\52\1\63\1\10\1\65\1\30\1\74\1\1\1\75\1\76\6\0\1\21\242\0\2\21\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\6\1\3"+
    "\3\7\1\10\1\11\1\1\1\12\1\1\1\7\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\2\25\1\26\15\7\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\2\0"+
    "\1\42\2\0\4\7\1\43\1\44\1\45\1\0\1\46"+
    "\3\0\1\47\4\7\1\50\1\0\1\17\1\0\1\51"+
    "\1\25\1\52\1\53\1\54\6\7\1\55\14\7\1\56"+
    "\1\57\1\60\1\7\1\3\1\0\2\3\5\7\1\46"+
    "\1\0\1\61\4\7\1\62\1\0\1\17\1\7\1\63"+
    "\1\26\3\7\1\45\3\7\1\64\3\7\1\65\1\7"+
    "\1\66\3\7\1\67\1\7\1\3\2\7\1\70\1\71"+
    "\1\72\2\0\1\73\3\7\1\74\1\75\7\7\1\76"+
    "\3\7\1\77\1\100\2\7\1\101\1\7\2\0\1\7"+
    "\1\102\1\7\1\103\1\104\1\7\1\105\1\7\1\106"+
    "\3\7\1\107\1\7\1\110\2\7\1\0\1\111\1\112"+
    "\2\7\1\113\1\114\1\115\1\116\1\117\1\7\1\120"+
    "\5\7\1\121\4\7\1\122\1\123\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\77\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\u013b\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\77"+
    "\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec"+
    "\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u05a9\0\u06a5"+
    "\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d"+
    "\0\u08dc\0\u091b\0\u095a\0\u0999\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\77\0\u013b\0\77\0\u09d8"+
    "\0\u0a17\0\77\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91"+
    "\0\77\0\77\0\77\0\u0bd0\0\u0c0f\0\u0c4e\0\u0333\0\u0c8d"+
    "\0\77\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\77\0\u0dc8\0\u0e07"+
    "\0\u0e46\0\77\0\77\0\77\0\77\0\77\0\u0e85\0\u0ec4"+
    "\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u013b\0\u0fff\0\u103e\0\u107d"+
    "\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275"+
    "\0\u12b4\0\u013b\0\u12f3\0\u013b\0\u1332\0\u1371\0\u13b0\0\u0a56"+
    "\0\u0a95\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\77\0\u152a"+
    "\0\u013b\0\u1569\0\u15a8\0\u15e7\0\u1626\0\77\0\u1665\0\77"+
    "\0\u16a4\0\u013b\0\u013b\0\u16e3\0\u1722\0\u1761\0\u013b\0\u17a0"+
    "\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a\0\u013b\0\u1959"+
    "\0\u013b\0\u1998\0\u19d7\0\u1a16\0\u013b\0\u1a55\0\u13b0\0\u1a94"+
    "\0\u1ad3\0\u013b\0\u013b\0\u013b\0\u1b12\0\u1b51\0\u013b\0\u1b90"+
    "\0\u1bcf\0\u1c0e\0\u013b\0\u013b\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a"+
    "\0\u1d49\0\u1d88\0\u1dc7\0\u013b\0\u1e06\0\u1e45\0\u1e84\0\u013b"+
    "\0\u013b\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d"+
    "\0\u013b\0\u207c\0\u20bb\0\u013b\0\u20fa\0\u013b\0\u2139\0\u013b"+
    "\0\u2178\0\u21b7\0\u21f6\0\u013b\0\u2235\0\u013b\0\u2274\0\u22b3"+
    "\0\u22f2\0\u013b\0\u013b\0\u2331\0\u2370\0\u013b\0\u013b\0\u013b"+
    "\0\u23af\0\u013b\0\u23ee\0\u013b\0\u242d\0\u246c\0\u24ab\0\u24ea"+
    "\0\u2529\0\u013b\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u013b\0\u013b"+
    "\0\u013b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\12\1\13\1\4\1\14\1\15\1\16\1\17\1\20"+
    "\1\2\1\21\1\2\1\22\1\23\1\24\1\25\1\12"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\12\1\42\1\12\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\12\1\51\1\52"+
    "\1\53\1\12\1\54\2\12\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\100\0\1\66\1\12"+
    "\2\0\1\12\1\0\6\12\7\0\1\12\3\0\1\12"+
    "\5\0\1\67\4\0\23\12\13\0\1\4\2\0\1\4"+
    "\1\70\1\4\3\0\1\4\1\71\66\0\1\6\73\0"+
    "\2\12\2\0\1\12\1\0\6\12\7\0\1\12\3\0"+
    "\1\12\12\0\23\12\17\0\1\72\72\0\1\4\2\0"+
    "\1\4\1\70\1\4\1\73\1\0\1\74\1\4\1\71"+
    "\63\0\2\12\2\0\1\12\1\0\6\12\7\0\1\12"+
    "\3\0\1\12\12\0\10\12\1\75\12\12\12\0\2\12"+
    "\2\0\1\12\1\0\1\12\1\76\4\12\7\0\1\12"+
    "\3\0\1\12\12\0\1\12\1\77\2\12\1\100\16\12"+
    "\26\0\1\101\20\0\1\67\2\0\1\102\53\0\1\103"+
    "\1\104\16\0\1\67\40\0\3\104\1\0\13\104\1\105"+
    "\1\106\56\104\3\107\1\0\14\107\1\110\1\107\1\111"+
    "\54\107\1\0\2\12\2\0\1\12\1\0\5\12\1\112"+
    "\7\0\1\12\3\0\1\12\12\0\1\113\12\12\1\114"+
    "\2\12\1\115\4\12\47\0\1\116\40\0\3\24\1\0"+
    "\73\24\5\0\1\25\2\0\3\25\1\0\1\25\7\0"+
    "\1\25\3\0\1\25\12\0\23\25\30\0\1\117\61\0"+
    "\1\120\2\0\1\120\1\0\6\120\2\0\1\121\4\0"+
    "\1\120\3\0\1\120\2\0\2\120\6\0\23\120\13\0"+
    "\1\120\2\0\1\120\1\0\6\120\2\0\1\121\4\0"+
    "\1\120\3\0\1\120\2\0\2\120\1\0\1\67\4\0"+
    "\23\120\47\0\1\67\75\0\1\122\1\67\76\0\1\123"+
    "\76\0\1\67\1\124\75\0\1\123\1\0\1\125\74\0"+
    "\1\123\2\0\1\126\36\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\12\3\0\1\12\12\0\10\12\1\127"+
    "\12\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\5\12\1\130\3\12\1\131"+
    "\1\12\1\132\7\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\12\3\0\1\12\12\0\4\12\1\133"+
    "\4\12\1\134\11\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\135\3\0\1\12\12\0\1\12\1\136"+
    "\16\12\1\137\2\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\12\3\0\1\12\12\0\5\12\1\140"+
    "\15\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\5\12\1\141\3\12\1\142"+
    "\11\12\12\0\2\12\2\0\1\12\1\0\5\12\1\143"+
    "\7\0\1\12\3\0\1\12\12\0\23\12\12\0\2\12"+
    "\2\0\1\12\1\0\6\12\7\0\1\12\3\0\1\12"+
    "\12\0\10\12\1\66\12\12\12\0\2\12\2\0\1\12"+
    "\1\0\5\12\1\144\7\0\1\12\3\0\1\12\12\0"+
    "\23\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\5\12\1\145\3\12\1\146"+
    "\1\12\1\147\7\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\12\3\0\1\12\12\0\5\12\1\150"+
    "\5\12\1\151\7\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\152\3\0\1\12\12\0\1\12\1\153"+
    "\12\12\1\154\6\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\12\3\0\1\12\12\0\21\12\1\155"+
    "\1\12\13\0\1\156\2\0\1\156\1\0\1\156\3\0"+
    "\1\156\100\0\1\157\63\0\1\160\2\0\1\160\1\0"+
    "\1\160\1\0\4\160\30\0\2\160\1\0\1\160\6\0"+
    "\1\160\24\0\1\161\1\0\1\161\3\0\1\161\64\0"+
    "\2\12\2\0\1\12\1\0\5\12\1\162\7\0\1\12"+
    "\3\0\1\12\12\0\23\12\12\0\2\12\2\0\1\12"+
    "\1\0\6\12\7\0\1\12\3\0\1\12\12\0\1\163"+
    "\22\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\13\12\1\164\7\12\12\0"+
    "\2\12\2\0\1\12\1\0\6\12\7\0\1\165\3\0"+
    "\1\12\12\0\16\12\1\166\4\12\11\0\3\104\1\0"+
    "\13\104\1\167\1\106\56\104\17\0\1\170\57\0\3\104"+
    "\1\0\15\104\1\0\55\104\3\107\1\0\15\107\1\0"+
    "\55\107\1\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\1\171\3\12\1\172\16\12"+
    "\12\0\2\12\2\0\1\12\1\0\6\12\7\0\1\12"+
    "\3\0\1\12\12\0\5\12\1\173\15\12\12\0\2\12"+
    "\2\0\1\12\1\0\6\12\7\0\1\12\3\0\1\12"+
    "\12\0\15\12\1\174\5\12\12\0\2\12\2\0\1\12"+
    "\1\0\6\12\7\0\1\12\3\0\1\12\12\0\12\12"+
    "\1\175\10\12\11\0\3\117\1\0\13\117\1\176\1\177"+
    "\56\117\2\0\1\120\2\0\1\120\1\0\6\120\7\0"+
    "\1\120\3\0\1\120\2\0\2\120\6\0\23\120\13\0"+
    "\1\121\2\0\10\121\2\0\1\200\4\0\2\121\2\0"+
    "\1\121\2\0\2\121\6\0\23\121\12\0\2\12\2\0"+
    "\1\12\1\0\6\12\7\0\1\12\3\0\1\12\12\0"+
    "\13\12\1\201\7\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\12\3\0\1\12\12\0\1\12\1\202"+
    "\21\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\1\203\22\12\12\0\2\12"+
    "\2\0\1\12\1\0\6\12\7\0\1\12\3\0\1\12"+
    "\12\0\4\12\1\204\16\12\12\0\2\12\2\0\1\12"+
    "\1\0\6\12\7\0\1\12\3\0\1\12\12\0\5\12"+
    "\1\205\15\12\12\0\2\12\2\0\1\12\1\0\6\12"+
    "\7\0\1\12\3\0\1\12\12\0\1\12\1\206\21\12"+
    "\12\0\2\12\2\0\1\12\1\0\6\12\7\0\1\12"+
    "\3\0\1\12\12\0\2\12\1\207\20\12\12\0\2\12"+
    "\2\0\1\12\1\0\6\12\7\0\1\12\3\0\1\12"+
    "\12\0\5\12\1\210\15\12\12\0\2\12\2\0\1\12"+
    "\1\0\6\12\7\0\1\211\3\0\1\12\12\0\1\212"+
    "\22\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\10\12\1\213\12\12\12\0"+
    "\2\12\2\0\1\12\1\0\6\12\7\0\1\12\3\0"+
    "\1\12\12\0\16\12\1\214\4\12\12\0\2\12\2\0"+
    "\1\12\1\0\6\12\7\0\1\12\3\0\1\12\12\0"+
    "\1\215\5\12\1\216\14\12\12\0\2\12\2\0\1\12"+
    "\1\0\6\12\7\0\1\12\3\0\1\12\12\0\1\217"+
    "\22\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\4\12\1\220\16\12\12\0"+
    "\2\12\2\0\1\12\1\0\6\12\7\0\1\12\3\0"+
    "\1\12\12\0\10\12\1\221\12\12\12\0\2\12\2\0"+
    "\1\12\1\0\6\12\7\0\1\12\3\0\1\12\12\0"+
    "\1\12\1\222\21\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\223\3\0\1\12\12\0\23\12\12\0"+
    "\2\12\2\0\1\12\1\0\6\12\7\0\1\12\3\0"+
    "\1\12\12\0\15\12\1\224\5\12\12\0\2\12\2\0"+
    "\1\12\1\0\6\12\7\0\1\12\3\0\1\12\12\0"+
    "\14\12\1\225\6\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\12\3\0\1\12\12\0\16\12\1\226"+
    "\4\12\13\0\1\156\2\0\1\156\1\0\1\156\3\0"+
    "\1\156\1\71\64\0\1\227\4\0\1\227\3\0\1\227"+
    "\64\0\2\12\2\0\1\12\1\0\6\12\7\0\1\12"+
    "\3\0\1\12\12\0\5\12\1\230\15\12\12\0\2\12"+
    "\2\0\1\12\1\0\5\12\1\231\7\0\1\12\3\0"+
    "\1\12\12\0\23\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\12\3\0\1\12\12\0\6\12\1\232"+
    "\14\12\12\0\2\12\2\0\1\12\1\0\5\12\1\233"+
    "\7\0\1\12\3\0\1\12\12\0\23\12\12\0\2\12"+
    "\2\0\1\12\1\0\6\12\7\0\1\12\3\0\1\12"+
    "\12\0\14\12\1\234\6\12\30\0\1\235\3\0\1\236"+
    "\54\0\2\12\2\0\1\12\1\0\6\12\7\0\1\12"+
    "\3\0\1\12\12\0\14\12\1\237\6\12\12\0\2\12"+
    "\2\0\1\12\1\0\6\12\7\0\1\12\3\0\1\12"+
    "\12\0\1\240\22\12\12\0\2\12\2\0\1\12\1\0"+
    "\5\12\1\241\7\0\1\12\3\0\1\12\12\0\23\12"+
    "\12\0\2\12\2\0\1\12\1\0\6\12\7\0\1\12"+
    "\3\0\1\12\12\0\1\12\1\242\21\12\11\0\3\117"+
    "\1\0\15\117\1\0\55\117\1\0\2\12\2\0\1\12"+
    "\1\0\5\12\1\243\7\0\1\12\3\0\1\12\12\0"+
    "\23\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\4\12\1\244\16\12\12\0"+
    "\2\12\2\0\1\12\1\0\6\12\7\0\1\245\3\0"+
    "\1\12\12\0\23\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\246\3\0\1\12\12\0\1\247\22\12"+
    "\12\0\2\12\2\0\1\12\1\0\6\12\7\0\1\12"+
    "\3\0\1\12\12\0\16\12\1\250\4\12\12\0\2\12"+
    "\2\0\1\12\1\0\6\12\7\0\1\12\3\0\1\12"+
    "\12\0\1\251\22\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\12\3\0\1\12\12\0\3\12\1\252"+
    "\17\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\5\12\1\253\15\12\12\0"+
    "\2\12\2\0\1\12\1\0\6\12\7\0\1\12\3\0"+
    "\1\12\12\0\2\12\1\254\20\12\12\0\2\12\2\0"+
    "\1\12\1\0\6\12\7\0\1\12\3\0\1\12\12\0"+
    "\13\12\1\255\7\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\12\3\0\1\12\12\0\11\12\1\256"+
    "\11\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\257\3\0\1\12\12\0\23\12\12\0\2\12\2\0"+
    "\1\12\1\0\6\12\7\0\1\12\3\0\1\12\12\0"+
    "\3\12\1\260\17\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\261\3\0\1\12\12\0\23\12\12\0"+
    "\2\12\2\0\1\12\1\0\6\12\7\0\1\12\3\0"+
    "\1\12\12\0\15\12\1\262\5\12\12\0\2\12\2\0"+
    "\1\12\1\0\6\12\7\0\1\12\3\0\1\12\12\0"+
    "\4\12\1\263\16\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\12\3\0\1\12\12\0\17\12\1\264"+
    "\3\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\1\12\1\265\21\12\30\0"+
    "\1\266\103\0\1\267\53\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\12\3\0\1\12\12\0\16\12\1\270"+
    "\4\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\10\12\1\271\12\12\12\0"+
    "\2\12\2\0\1\12\1\0\6\12\7\0\1\12\3\0"+
    "\1\12\12\0\5\12\1\272\15\12\12\0\2\12\2\0"+
    "\1\12\1\0\6\12\7\0\1\273\3\0\1\12\12\0"+
    "\23\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\1\274\22\12\12\0\2\12"+
    "\2\0\1\12\1\0\6\12\7\0\1\12\3\0\1\12"+
    "\12\0\16\12\1\275\4\12\12\0\2\12\2\0\1\12"+
    "\1\0\6\12\7\0\1\12\3\0\1\12\12\0\1\276"+
    "\22\12\12\0\2\12\2\0\1\12\1\0\5\12\1\277"+
    "\7\0\1\12\3\0\1\12\12\0\23\12\12\0\2\12"+
    "\2\0\1\12\1\0\6\12\7\0\1\12\3\0\1\12"+
    "\12\0\21\12\1\300\1\12\12\0\2\12\2\0\1\12"+
    "\1\0\6\12\7\0\1\12\3\0\1\12\12\0\10\12"+
    "\1\301\12\12\12\0\2\12\2\0\1\12\1\0\6\12"+
    "\7\0\1\12\3\0\1\12\12\0\10\12\1\302\12\12"+
    "\12\0\2\12\2\0\1\12\1\0\6\12\7\0\1\12"+
    "\3\0\1\12\12\0\1\303\22\12\12\0\2\12\2\0"+
    "\1\12\1\0\5\12\1\304\7\0\1\12\3\0\1\12"+
    "\12\0\23\12\12\0\2\12\2\0\1\12\1\0\5\12"+
    "\1\305\7\0\1\12\3\0\1\12\12\0\23\12\12\0"+
    "\2\12\2\0\1\12\1\0\5\12\1\306\7\0\1\12"+
    "\3\0\1\12\12\0\23\12\12\0\2\12\2\0\1\12"+
    "\1\0\6\12\7\0\1\12\3\0\1\12\12\0\15\12"+
    "\1\307\5\12\12\0\2\12\2\0\1\12\1\0\6\12"+
    "\7\0\1\12\3\0\1\12\12\0\2\12\1\310\20\12"+
    "\30\0\1\111\104\0\1\311\52\0\2\12\2\0\1\12"+
    "\1\0\6\12\7\0\1\12\3\0\1\12\12\0\3\12"+
    "\1\312\17\12\12\0\2\12\2\0\1\12\1\0\6\12"+
    "\7\0\1\12\3\0\1\12\12\0\4\12\1\313\16\12"+
    "\12\0\2\12\2\0\1\314\1\0\6\12\7\0\1\12"+
    "\3\0\1\12\12\0\23\12\12\0\2\12\2\0\1\12"+
    "\1\0\6\12\7\0\1\12\3\0\1\12\12\0\1\12"+
    "\1\315\21\12\12\0\2\12\2\0\1\12\1\0\6\12"+
    "\7\0\1\12\3\0\1\12\12\0\10\12\1\316\12\12"+
    "\12\0\2\12\2\0\1\12\1\0\6\12\7\0\1\12"+
    "\3\0\1\12\12\0\12\12\1\317\10\12\12\0\2\12"+
    "\2\0\1\12\1\0\6\12\7\0\1\12\3\0\1\12"+
    "\12\0\1\12\1\320\21\12\12\0\2\12\2\0\1\12"+
    "\1\0\5\12\1\321\7\0\1\12\3\0\1\12\12\0"+
    "\23\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\10\12\1\322\12\12\12\0"+
    "\2\12\2\0\1\12\1\0\6\12\7\0\1\12\3\0"+
    "\1\12\12\0\11\12\1\323\11\12\12\0\2\12\2\0"+
    "\1\12\1\0\6\12\7\0\1\324\3\0\1\12\12\0"+
    "\23\12\17\0\1\170\71\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\12\3\0\1\12\12\0\1\12\1\325"+
    "\21\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\13\12\1\326\7\12\12\0"+
    "\2\12\2\0\1\12\1\0\6\12\7\0\1\327\3\0"+
    "\1\12\12\0\23\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\12\3\0\1\12\12\0\16\12\1\330"+
    "\4\12\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\5\12\1\331\15\12\12\0"+
    "\2\12\2\0\1\12\1\0\5\12\1\332\7\0\1\12"+
    "\3\0\1\12\12\0\23\12\12\0\2\12\2\0\1\12"+
    "\1\0\6\12\7\0\1\12\3\0\1\12\12\0\22\12"+
    "\1\333\12\0\2\12\2\0\1\12\1\0\6\12\7\0"+
    "\1\12\3\0\1\12\12\0\1\12\1\334\21\12\12\0"+
    "\2\12\2\0\1\12\1\0\6\12\7\0\1\12\3\0"+
    "\1\12\12\0\6\12\1\335\14\12\12\0\2\12\2\0"+
    "\1\12\1\0\6\12\7\0\1\12\3\0\1\12\12\0"+
    "\1\12\1\336\21\12\12\0\2\12\2\0\1\12\1\0"+
    "\6\12\7\0\1\12\3\0\1\12\12\0\1\337\22\12"+
    "\12\0\2\12\2\0\1\12\1\0\5\12\1\340\7\0"+
    "\1\12\3\0\1\12\12\0\23\12\12\0\2\12\2\0"+
    "\1\12\1\0\6\12\7\0\1\12\3\0\1\12\12\0"+
    "\3\12\1\341\17\12\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9828];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\12\1\1\11\34\1\11\11"+
    "\1\1\1\11\2\0\1\11\2\0\4\1\3\11\1\0"+
    "\1\1\3\0\1\11\4\1\1\11\1\0\1\1\1\0"+
    "\5\11\30\1\1\0\7\1\1\11\1\0\5\1\1\11"+
    "\1\0\1\11\34\1\2\0\27\1\2\0\21\1\1\0"+
    "\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    String oppening = "";
    int lastState = YYINITIAL;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GdLexerHighlighter(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 85: break;
          case 2: 
            { return GdTypes.OR;
            } 
            // fall through
          case 86: break;
          case 3: 
            { return GdTypes.NUMBER;
            } 
            // fall through
          case 87: break;
          case 4: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 88: break;
          case 5: 
            { return GdTypes.UNDER;
            } 
            // fall through
          case 89: break;
          case 6: 
            { return GdTypes.DOT;
            } 
            // fall through
          case 90: break;
          case 7: 
            { return GdTypes.IDENTIFIER;
            } 
            // fall through
          case 91: break;
          case 8: 
            { return GdTypes.MINUS;
            } 
            // fall through
          case 92: break;
          case 9: 
            { return GdTypes.AND;
            } 
            // fall through
          case 93: break;
          case 10: 
            { return GdTypes.BACKSLASH;
            } 
            // fall through
          case 94: break;
          case 11: 
            { return GdTypes.COLON;
            } 
            // fall through
          case 95: break;
          case 12: 
            { return GdTypes.COMMENT;
            } 
            // fall through
          case 96: break;
          case 13: 
            { return GdTypes.ANNOTATOR;
            } 
            // fall through
          case 97: break;
          case 14: 
            { return GdTypes.XOR;
            } 
            // fall through
          case 98: break;
          case 15: 
            { return GdTypes.NODE_PATH_LEX;
            } 
            // fall through
          case 99: break;
          case 16: 
            { return GdTypes.MOD;
            } 
            // fall through
          case 100: break;
          case 17: 
            { return GdTypes.DIV;
            } 
            // fall through
          case 101: break;
          case 18: 
            { return GdTypes.PLUS;
            } 
            // fall through
          case 102: break;
          case 19: 
            { return GdTypes.EQ;
            } 
            // fall through
          case 103: break;
          case 20: 
            { return GdTypes.MUL;
            } 
            // fall through
          case 104: break;
          case 21: 
            { return GdTypes.TEST_OPERATOR;
            } 
            // fall through
          case 105: break;
          case 22: 
            { return GdTypes.NEGATE;
            } 
            // fall through
          case 106: break;
          case 23: 
            { return GdTypes.COMMA;
            } 
            // fall through
          case 107: break;
          case 24: 
            { return GdTypes.SEMICON;
            } 
            // fall through
          case 108: break;
          case 25: 
            { return GdTypes.LRBR;
            } 
            // fall through
          case 109: break;
          case 26: 
            { return GdTypes.RRBR;
            } 
            // fall through
          case 110: break;
          case 27: 
            { return GdTypes.LSBR;
            } 
            // fall through
          case 111: break;
          case 28: 
            { return GdTypes.RSBR;
            } 
            // fall through
          case 112: break;
          case 29: 
            { return GdTypes.LCBR;
            } 
            // fall through
          case 113: break;
          case 30: 
            { return GdTypes.RCBR;
            } 
            // fall through
          case 114: break;
          case 31: 
            { return GdTypes.NOT;
            } 
            // fall through
          case 115: break;
          case 32: 
            { return GdTypes.OROR;
            } 
            // fall through
          case 116: break;
          case 33: 
            { return GdTypes.ASSIGN;
            } 
            // fall through
          case 117: break;
          case 34: 
            { return GdTypes.DOTDOT;
            } 
            // fall through
          case 118: break;
          case 35: 
            { return GdTypes.MMINUS;
            } 
            // fall through
          case 119: break;
          case 36: 
            { return GdTypes.RET;
            } 
            // fall through
          case 120: break;
          case 37: 
            { return GdTypes.ANDAND;
            } 
            // fall through
          case 121: break;
          case 38: 
            { if (yytext().charAt(0) == '&') { return GdTypes.STRING_NAME; } return GdTypes.STRING;
            } 
            // fall through
          case 122: break;
          case 39: 
            { return GdTypes.STRING;
            } 
            // fall through
          case 123: break;
          case 40: 
            { return GdTypes.CEQ;
            } 
            // fall through
          case 124: break;
          case 41: 
            { return GdTypes.PPLUS;
            } 
            // fall through
          case 125: break;
          case 42: 
            { return GdTypes.POWER;
            } 
            // fall through
          case 126: break;
          case 43: 
            { return GdTypes.LBSHIFT;
            } 
            // fall through
          case 127: break;
          case 44: 
            { return GdTypes.RBSHIFT;
            } 
            // fall through
          case 128: break;
          case 45: 
            { return GdTypes.AS;
            } 
            // fall through
          case 129: break;
          case 46: 
            { return GdTypes.IS;
            } 
            // fall through
          case 130: break;
          case 47: 
            { return GdTypes.IN;
            } 
            // fall through
          case 131: break;
          case 48: 
            { return GdTypes.IF;
            } 
            // fall through
          case 132: break;
          case 49: 
            { return GdTypes.SET;
            } 
            // fall through
          case 133: break;
          case 50: 
            { return GdTypes.NODE_PATH_LIT;
            } 
            // fall through
          case 134: break;
          case 51: 
            { return GdTypes.NAN;
            } 
            // fall through
          case 135: break;
          case 52: 
            { return GdTypes.VAR;
            } 
            // fall through
          case 136: break;
          case 53: 
            { return GdTypes.GET;
            } 
            // fall through
          case 137: break;
          case 54: 
            { return GdTypes.FOR;
            } 
            // fall through
          case 138: break;
          case 55: 
            { return GdTypes.INF;
            } 
            // fall through
          case 139: break;
          case 56: 
            { return GdTypes.ENUM;
            } 
            // fall through
          case 140: break;
          case 57: 
            { return GdTypes.ELSE;
            } 
            // fall through
          case 141: break;
          case 58: 
            { return GdTypes.ELIF;
            } 
            // fall through
          case 142: break;
          case 59: 
            { return GdTypes.SELF;
            } 
            // fall through
          case 143: break;
          case 60: 
            { return GdTypes.TRUE;
            } 
            // fall through
          case 144: break;
          case 61: 
            { return GdTypes.NULL;
            } 
            // fall through
          case 145: break;
          case 62: 
            { return GdTypes.VOID;
            } 
            // fall through
          case 146: break;
          case 63: 
            { return GdTypes.FUNC;
            } 
            // fall through
          case 147: break;
          case 64: 
            { return GdTypes.PASS;
            } 
            // fall through
          case 148: break;
          case 65: 
            { return GdTypes.BREAK;
            } 
            // fall through
          case 149: break;
          case 66: 
            { return GdTypes.SUPER;
            } 
            // fall through
          case 150: break;
          case 67: 
            { return GdTypes.CLASS;
            } 
            // fall through
          case 151: break;
          case 68: 
            { return GdTypes.CONST;
            } 
            // fall through
          case 152: break;
          case 69: 
            { return GdTypes.AWAIT;
            } 
            // fall through
          case 153: break;
          case 70: 
            { return GdTypes.MATCH;
            } 
            // fall through
          case 154: break;
          case 71: 
            { return GdTypes.FALSE;
            } 
            // fall through
          case 155: break;
          case 72: 
            { return GdTypes.WHILE;
            } 
            // fall through
          case 156: break;
          case 73: 
            { return GdTypes.STATIC;
            } 
            // fall through
          case 157: break;
          case 74: 
            { return GdTypes.SIGNAL;
            } 
            // fall through
          case 158: break;
          case 75: 
            { return GdTypes.MASTER;
            } 
            // fall through
          case 159: break;
          case 76: 
            { return GdTypes.VARARG;
            } 
            // fall through
          case 160: break;
          case 77: 
            { return GdTypes.RETURN;
            } 
            // fall through
          case 161: break;
          case 78: 
            { return GdTypes.REMOTE;
            } 
            // fall through
          case 162: break;
          case 79: 
            { return GdTypes.PUPPET;
            } 
            // fall through
          case 163: break;
          case 80: 
            { return GdTypes.EXTENDS;
            } 
            // fall through
          case 164: break;
          case 81: 
            { return GdTypes.CONTINUE;
            } 
            // fall through
          case 165: break;
          case 82: 
            { return GdTypes.BREAKPOINT;
            } 
            // fall through
          case 166: break;
          case 83: 
            { return GdTypes.CLASS_NAME;
            } 
            // fall through
          case 167: break;
          case 84: 
            { return GdTypes.REMOTESYNC;
            } 
            // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
