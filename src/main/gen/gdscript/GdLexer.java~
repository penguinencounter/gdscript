/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package gdscript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import gdscript.psi.GdTokenType;import gdscript.psi.GdTypes;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Gd.flex</tt>
 */
class GdLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int AWAIT_NEW_LINE = 2;
  public static final int AWAIT_NEW_LINE_ONCE = 4;
  public static final int AWAIT_ENUM_SEPARATOR = 6;
  public static final int CREATE_INDENT = 8;
  public static final int STRING = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\6\1\7\2\21\1\4\22\0\1\6\1\37\1\20\1\23\1\26\1\30\1\34\1\22\1\77\1"+
    "\100\1\33\1\31\1\40\1\17\1\3\1\27\1\11\1\15\10\2\1\75\1\76\1\35\1\32\1\36"+
    "\1\0\1\24\1\67\4\25\1\72\2\25\1\65\4\25\1\71\1\25\1\64\2\25\1\62\1\66\1\70"+
    "\5\25\1\101\1\5\1\102\1\103\1\10\1\0\1\51\1\14\1\47\1\45\1\16\1\13\1\56\1"+
    "\74\1\61\1\25\1\63\1\50\1\52\1\44\1\55\1\60\1\25\1\54\1\46\1\43\1\57\1\53"+
    "\1\73\1\12\2\25\1\41\1\1\1\42\1\104\6\0\1\21\242\0\2\21\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\2"+
    "\1\7\1\10\1\4\4\11\1\12\2\2\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\2\24"+
    "\1\25\1\26\1\27\1\30\22\11\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\43\1\45\1\46\1\47\6\50\1\1\1\51"+
    "\1\1\2\52\1\53\1\54\2\0\1\55\2\0\11\11"+
    "\1\56\1\57\2\0\1\60\2\0\1\60\2\13\1\15"+
    "\1\61\1\24\1\62\1\63\1\64\11\11\1\65\10\11"+
    "\1\66\1\67\1\70\1\11\1\71\4\11\1\72\4\50"+
    "\1\0\1\4\1\0\2\4\2\11\1\73\7\11\1\0"+
    "\1\11\1\25\1\11\1\74\5\11\1\62\3\11\1\75"+
    "\2\11\1\76\2\11\1\77\1\100\1\11\1\101\1\102"+
    "\1\11\1\50\1\4\2\11\1\103\1\11\1\104\1\11"+
    "\1\105\1\106\1\107\2\0\1\110\1\111\1\112\11\11"+
    "\1\113\1\11\1\114\3\11\1\50\1\115\1\116\1\117"+
    "\1\11\1\0\2\11\1\120\1\11\1\121\1\11\1\122"+
    "\1\123\4\11\1\124\2\11\1\125\1\126\2\11\1\127"+
    "\1\130\1\131\1\11\1\132\1\11\1\133\2\11\1\134"+
    "\2\11\1\135\2\11\1\136\1\137";

  private static int [] zzUnpackAction() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u019e\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u033c"+
    "\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9"+
    "\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0633\0\u0747\0\u078c"+
    "\0\u07d1\0\u0702\0\u019e\0\u019e\0\u019e\0\u0816\0\u085b\0\u08a0"+
    "\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8"+
    "\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0"+
    "\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e"+
    "\0\u019e\0\u0d35\0\u019e\0\u0d7a\0\u019e\0\u019e\0\u019e\0\u0dbf"+
    "\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u019e\0\u0fa2"+
    "\0\u0fe7\0\u019e\0\u033c\0\u019e\0\u102c\0\u1071\0\u019e\0\u10b6"+
    "\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de"+
    "\0\u1323\0\u1368\0\u019e\0\u019e\0\u13ad\0\u13f2\0\u1437\0\u051f"+
    "\0\u147c\0\u019e\0\u14c1\0\u019e\0\u1506\0\u019e\0\u019e\0\u019e"+
    "\0\u019e\0\u019e\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4"+
    "\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc"+
    "\0\u1911\0\u1956\0\u199b\0\u19e0\0\u033c\0\u1a25\0\u033c\0\u1a6a"+
    "\0\u033c\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u019e\0\u1bc3\0\u1c08"+
    "\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u10b6\0\u10fb\0\u1da6"+
    "\0\u1deb\0\u033c\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89"+
    "\0\u1fce\0\u2013\0\u2058\0\u033c\0\u209d\0\u033c\0\u20e2\0\u2127"+
    "\0\u216c\0\u21b1\0\u21f6\0\u033c\0\u223b\0\u2280\0\u22c5\0\u230a"+
    "\0\u234f\0\u2394\0\u033c\0\u23d9\0\u241e\0\u033c\0\u033c\0\u2463"+
    "\0\u033c\0\u033c\0\u24a8\0\u24ed\0\u1d61\0\u2532\0\u2577\0\u033c"+
    "\0\u25bc\0\u033c\0\u2601\0\u033c\0\u033c\0\u033c\0\u2646\0\u268b"+
    "\0\u033c\0\u033c\0\u033c\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4"+
    "\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u033c\0\u293d\0\u033c\0\u2982"+
    "\0\u29c7\0\u2a0c\0\u2a51\0\u033c\0\u033c\0\u2a96\0\u2adb\0\u2b20"+
    "\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u033c\0\u2c79\0\u033c\0\u033c"+
    "\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u033c\0\u2dd2\0\u2e17\0\u033c"+
    "\0\u033c\0\u2e5c\0\u2ea1\0\u033c\0\u033c\0\u033c\0\u2ee6\0\u033c"+
    "\0\u2f2b\0\u033c\0\u2f70\0\u2fb5\0\u033c\0\u2ffa\0\u303f\0\u033c"+
    "\0\u3084\0\u30c9\0\u033c\0\u033c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\13"+
    "\1\16\1\17\1\20\1\21\1\22\1\11\1\23\1\24"+
    "\1\25\1\7\1\26\1\27\1\30\1\20\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\20\1\50\1\51"+
    "\1\20\1\52\1\53\1\54\1\55\1\56\1\57\1\20"+
    "\1\60\1\61\1\62\1\20\1\63\1\64\1\65\2\20"+
    "\1\66\1\20\1\67\1\20\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\7\1\10\1\11\1\12"+
    "\1\100\1\14\1\15\1\100\1\16\1\17\1\20\1\21"+
    "\1\22\1\11\1\23\1\24\1\25\1\7\1\26\1\27"+
    "\1\30\1\20\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\20\1\50\1\51\1\20\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\20\1\60\1\61\1\62\1\20"+
    "\1\63\1\64\1\65\2\20\1\66\1\20\1\67\1\20"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\7\1\10\1\11\1\12\1\101\1\14\1\15\1\101"+
    "\1\16\1\17\1\20\1\21\1\22\1\11\1\23\1\24"+
    "\1\25\1\7\1\26\1\27\1\30\1\20\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\20\1\50\1\51"+
    "\1\20\1\52\1\53\1\54\1\55\1\56\1\57\1\20"+
    "\1\60\1\61\1\62\1\20\1\63\1\64\1\65\2\20"+
    "\1\66\1\20\1\67\1\20\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\7\1\102\1\11\1\12"+
    "\1\103\1\14\1\15\1\103\1\104\1\17\3\104\1\11"+
    "\1\104\1\24\1\25\1\7\1\26\1\27\1\30\1\104"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\105\1\106\1\107\32\104\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\4\110\1\13"+
    "\1\111\1\112\1\13\10\110\1\113\1\7\1\114\1\115"+
    "\61\110\4\116\1\117\1\120\1\116\1\117\10\116\1\121"+
    "\1\116\1\122\62\116\106\0\1\123\1\20\5\0\7\20"+
    "\6\0\1\20\4\0\1\124\10\0\32\20\12\0\1\11"+
    "\1\125\4\0\2\11\3\0\1\11\1\126\71\0\1\127"+
    "\105\0\1\13\2\0\1\13\103\0\1\15\1\13\13\0"+
    "\1\27\62\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\32\20\12\0\1\11\1\125\4\0\2\11\1\130\1\0"+
    "\1\131\1\11\1\126\67\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\5\20\1\132\1\133\3\20\1\134\1\20"+
    "\1\135\15\20\11\0\2\20\5\0\7\20\6\0\1\20"+
    "\15\0\11\20\1\136\1\137\17\20\11\0\2\20\5\0"+
    "\2\20\1\140\4\20\6\0\1\20\15\0\1\20\1\141"+
    "\3\20\1\142\24\20\27\0\1\143\12\0\1\124\3\0"+
    "\1\144\46\0\4\145\1\0\1\146\1\145\1\0\10\145"+
    "\1\147\64\145\4\150\1\0\1\151\1\150\1\0\12\150"+
    "\1\152\62\150\4\27\1\153\2\27\1\154\75\27\10\0"+
    "\1\30\1\0\3\30\1\0\1\30\6\0\1\30\15\0"+
    "\32\30\12\0\1\31\5\0\7\31\6\0\1\31\1\0"+
    "\1\31\13\0\32\31\42\0\1\124\54\0\2\155\4\0"+
    "\7\155\6\0\1\155\1\0\1\155\2\0\1\124\10\0"+
    "\32\155\41\0\1\156\1\124\104\0\1\157\104\0\1\124"+
    "\1\0\1\160\102\0\1\157\2\0\1\161\101\0\1\157"+
    "\3\0\1\162\47\0\2\20\5\0\7\20\6\0\1\20"+
    "\15\0\11\20\1\163\20\20\11\0\2\20\5\0\7\20"+
    "\6\0\1\20\15\0\12\20\1\164\1\20\1\165\15\20"+
    "\11\0\2\20\5\0\6\20\1\166\6\0\1\20\15\0"+
    "\1\167\15\20\1\170\13\20\11\0\2\20\5\0\7\20"+
    "\6\0\1\20\15\0\5\20\1\171\4\20\1\172\17\20"+
    "\11\0\2\20\5\0\7\20\6\0\1\20\15\0\1\20"+
    "\1\173\1\20\1\174\24\20\1\175\1\20\11\0\2\20"+
    "\5\0\7\20\6\0\1\20\15\0\6\20\1\176\23\20"+
    "\11\0\2\20\5\0\7\20\6\0\1\20\15\0\6\20"+
    "\1\177\3\20\1\200\17\20\11\0\2\20\5\0\6\20"+
    "\1\201\6\0\1\20\15\0\32\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\11\20\1\123\20\20\11\0"+
    "\2\20\5\0\6\20\1\202\6\0\1\20\15\0\32\20"+
    "\11\0\2\20\5\0\7\20\6\0\1\20\15\0\6\20"+
    "\1\203\2\20\1\204\20\20\11\0\2\20\5\0\3\20"+
    "\1\205\3\20\6\0\1\20\15\0\1\20\1\206\1\20"+
    "\1\207\26\20\11\0\2\20\5\0\7\20\6\0\1\20"+
    "\15\0\1\210\31\20\11\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\22\20\1\211\7\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\26\20\1\212\3\20\11\0"+
    "\2\20\5\0\7\20\6\0\1\20\15\0\24\20\1\213"+
    "\5\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\24\20\1\214\5\20\11\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\31\20\1\215\42\0\1\216\53\0\2\104"+
    "\5\0\7\104\6\0\1\104\4\0\1\124\10\0\32\104"+
    "\11\0\2\104\5\0\7\104\6\0\1\104\15\0\32\104"+
    "\10\0\4\110\1\0\2\110\1\0\11\110\1\0\67\110"+
    "\1\13\2\110\1\13\11\110\1\0\67\110\1\0\1\110"+
    "\1\112\1\13\11\110\1\0\1\110\1\115\61\110\4\217"+
    "\1\0\1\220\1\217\1\0\10\217\1\221\1\145\63\217"+
    "\4\114\1\0\1\222\1\114\1\0\11\114\1\150\1\110"+
    "\62\114\4\115\1\153\2\115\1\154\11\115\1\27\63\115"+
    "\4\116\1\0\2\116\1\0\10\116\1\0\1\116\1\0"+
    "\66\116\1\13\2\116\1\13\10\116\1\0\1\116\1\0"+
    "\62\116\20\0\1\223\66\0\1\224\5\0\2\224\3\0"+
    "\1\224\106\0\1\225\67\0\1\226\5\0\2\226\1\0"+
    "\4\226\26\0\1\226\1\0\1\226\1\0\1\226\43\0"+
    "\2\227\3\0\1\227\70\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\12\20\1\230\17\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\5\20\1\231\24\20\11\0"+
    "\2\20\5\0\7\20\6\0\1\20\15\0\11\20\1\232"+
    "\20\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\1\20\1\233\30\20\11\0\2\20\5\0\6\20\1\234"+
    "\6\0\1\20\15\0\32\20\11\0\2\20\5\0\7\20"+
    "\6\0\1\20\15\0\12\20\1\235\17\20\11\0\2\20"+
    "\5\0\7\20\6\0\1\20\15\0\1\236\31\20\11\0"+
    "\2\20\5\0\7\20\6\0\1\20\15\0\14\20\1\237"+
    "\15\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\3\20\1\240\12\20\1\241\13\20\10\0\4\145\1\0"+
    "\1\146\1\145\1\0\10\145\1\152\70\145\1\0\2\145"+
    "\1\0\11\145\1\0\63\145\20\0\1\242\64\0\4\150"+
    "\1\0\2\150\1\0\11\150\1\0\63\150\7\0\1\154"+
    "\77\0\2\155\4\0\7\155\6\0\1\155\1\0\1\155"+
    "\13\0\32\155\11\0\2\20\5\0\7\20\6\0\1\20"+
    "\15\0\14\20\1\243\15\20\11\0\2\20\5\0\7\20"+
    "\6\0\1\20\15\0\1\244\31\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\5\20\1\245\24\20\11\0"+
    "\2\20\5\0\7\20\6\0\1\20\15\0\1\246\4\20"+
    "\1\247\24\20\11\0\2\20\5\0\7\20\6\0\1\20"+
    "\15\0\6\20\1\250\23\20\11\0\2\20\5\0\7\20"+
    "\6\0\1\20\15\0\13\20\1\251\16\20\11\0\2\20"+
    "\5\0\7\20\6\0\1\20\15\0\6\20\1\252\23\20"+
    "\11\0\2\20\5\0\7\20\6\0\1\20\15\0\1\20"+
    "\1\253\30\20\11\0\2\20\5\0\7\20\6\0\1\20"+
    "\15\0\2\20\1\254\27\20\11\0\2\20\5\0\7\20"+
    "\6\0\1\20\15\0\3\20\1\255\26\20\11\0\2\20"+
    "\5\0\7\20\6\0\1\20\15\0\6\20\1\256\23\20"+
    "\11\0\2\20\5\0\7\20\6\0\1\20\15\0\1\257"+
    "\31\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\11\20\1\260\20\20\11\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\16\20\1\261\13\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\1\262\31\20\11\0\2\20"+
    "\5\0\7\20\6\0\1\20\15\0\1\263\31\20\11\0"+
    "\2\20\5\0\7\20\6\0\1\20\15\0\3\20\1\264"+
    "\26\20\11\0\2\20\5\0\6\20\1\265\6\0\1\20"+
    "\15\0\32\20\11\0\2\20\5\0\3\20\1\266\3\20"+
    "\6\0\1\20\15\0\1\267\31\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\11\20\1\270\20\20\11\0"+
    "\2\20\5\0\7\20\6\0\1\20\15\0\27\20\1\266"+
    "\2\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\25\20\1\271\4\20\11\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\26\20\1\272\3\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\16\20\1\273\13\20\10\0"+
    "\4\217\1\0\1\220\1\217\1\0\10\217\1\110\1\145"+
    "\67\217\1\0\2\217\1\0\11\217\1\0\63\217\4\110"+
    "\1\0\2\110\1\0\10\110\1\274\1\0\63\110\4\114"+
    "\1\0\2\114\1\0\11\114\1\0\63\114\20\0\1\122"+
    "\66\0\1\224\5\0\2\224\3\0\1\224\1\126\70\0"+
    "\1\275\6\0\1\275\3\0\1\275\70\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\6\20\1\276\23\20\11\0"+
    "\2\20\5\0\7\20\6\0\1\20\15\0\3\20\1\277"+
    "\26\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\4\20\1\300\25\20\11\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\6\20\1\301\23\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\5\20\1\302\24\20\11\0"+
    "\2\20\5\0\6\20\1\303\6\0\1\20\15\0\32\20"+
    "\11\0\2\20\5\0\7\20\6\0\1\20\15\0\7\20"+
    "\1\304\22\20\11\0\2\20\5\0\6\20\1\305\6\0"+
    "\1\20\15\0\32\20\11\0\2\20\5\0\3\20\1\306"+
    "\3\20\6\0\1\20\15\0\32\20\10\0\5\242\1\307"+
    "\12\242\1\310\64\242\1\0\2\20\5\0\6\20\1\311"+
    "\6\0\1\20\15\0\32\20\11\0\2\20\5\0\7\20"+
    "\6\0\1\20\15\0\5\20\1\312\24\20\11\0\2\20"+
    "\5\0\3\20\1\313\3\20\6\0\1\20\15\0\32\20"+
    "\11\0\2\20\5\0\7\20\6\0\1\20\15\0\1\314"+
    "\31\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\1\20\1\315\30\20\11\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\3\20\1\316\26\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\1\317\2\20\1\320\26\20"+
    "\11\0\2\20\5\0\6\20\1\321\6\0\1\20\15\0"+
    "\32\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\16\20\1\322\13\20\11\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\4\20\1\323\25\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\6\20\1\324\23\20\11\0"+
    "\2\20\5\0\7\20\6\0\1\20\15\0\2\20\1\325"+
    "\27\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\14\20\1\326\15\20\11\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\3\20\1\327\26\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\5\20\1\330\24\20\11\0"+
    "\2\20\5\0\7\20\6\0\1\20\15\0\16\20\1\331"+
    "\13\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\5\20\1\332\24\20\10\0\4\274\1\242\1\333\1\274"+
    "\1\242\10\274\1\110\1\242\63\274\1\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\1\334\31\20\11\0\2\20"+
    "\5\0\6\20\1\335\6\0\1\20\15\0\32\20\11\0"+
    "\2\20\5\0\7\20\6\0\1\20\15\0\20\20\1\336"+
    "\11\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\1\20\1\337\30\20\10\0\4\242\1\0\2\242\1\0"+
    "\11\242\1\0\63\242\20\0\1\340\65\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\16\20\1\341\13\20\11\0"+
    "\2\20\5\0\7\20\6\0\1\20\15\0\6\20\1\342"+
    "\23\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\3\20\1\343\26\20\11\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\16\20\1\344\13\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\1\345\31\20\11\0\2\20"+
    "\5\0\7\20\6\0\1\20\15\0\11\20\1\346\20\20"+
    "\11\0\2\20\5\0\7\20\6\0\1\20\15\0\1\347"+
    "\31\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\31\20\1\350\11\0\2\20\5\0\7\20\6\0\1\20"+
    "\15\0\11\20\1\351\20\20\11\0\2\20\5\0\7\20"+
    "\6\0\1\20\15\0\11\20\1\352\20\20\11\0\2\20"+
    "\5\0\7\20\6\0\1\20\15\0\12\20\1\353\17\20"+
    "\11\0\2\20\5\0\7\20\6\0\1\20\15\0\1\20"+
    "\1\354\30\20\11\0\2\20\5\0\6\20\1\355\6\0"+
    "\1\20\15\0\32\20\10\0\4\274\1\0\2\274\1\0"+
    "\11\274\1\0\63\274\1\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\15\20\1\356\14\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\2\20\1\357\27\20\30\0"+
    "\1\152\65\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\4\20\1\360\25\20\11\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\5\20\1\361\24\20\11\0\2\20\5\0"+
    "\1\362\6\20\6\0\1\20\15\0\32\20\11\0\2\20"+
    "\5\0\7\20\6\0\1\20\15\0\1\20\1\363\30\20"+
    "\11\0\2\20\5\0\7\20\6\0\1\20\15\0\1\364"+
    "\31\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\13\20\1\365\16\20\11\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\1\20\1\366\30\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\6\20\1\367\23\20\11\0"+
    "\2\20\5\0\7\20\6\0\1\20\15\0\13\20\1\370"+
    "\16\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\12\20\1\371\17\20\11\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\3\20\1\372\26\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\1\20\1\373\30\20\11\0"+
    "\2\20\5\0\7\20\6\0\1\20\15\0\14\20\1\374"+
    "\15\20\11\0\2\20\5\0\7\20\6\0\1\20\15\0"+
    "\2\20\1\375\27\20\11\0\2\20\5\0\7\20\6\0"+
    "\1\20\15\0\16\20\1\376\13\20\11\0\2\20\5\0"+
    "\7\20\6\0\1\20\15\0\6\20\1\377\23\20\11\0"+
    "\2\20\5\0\6\20\1\u0100\6\0\1\20\15\0\32\20"+
    "\11\0\2\20\5\0\7\20\6\0\1\20\15\0\1\20"+
    "\1\u0101\30\20\11\0\2\20\5\0\7\20\6\0\1\20"+
    "\15\0\7\20\1\u0102\22\20\11\0\2\20\5\0\7\20"+
    "\6\0\1\20\15\0\1\u0103\31\20\11\0\2\20\5\0"+
    "\6\20\1\u0104\6\0\1\20\15\0\32\20\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12558];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\1\11\3\1\1\11\27\1\3\11\23\1"+
    "\11\11\1\1\1\11\1\1\3\11\7\1\1\11\2\1"+
    "\1\11\1\1\1\11\2\0\1\11\2\0\11\1\2\11"+
    "\2\0\1\1\2\0\1\11\1\1\1\11\1\1\5\11"+
    "\33\1\1\11\4\1\1\0\1\1\1\0\14\1\1\0"+
    "\44\1\2\0\27\1\1\0\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    String oppening = "";
    int lastState = YYINITIAL;
    boolean lineEnded = false;
    boolean enumValEnded = false;
    boolean indented = false;
    boolean ignoreIndent = false;
    int indent = 0;
    Stack<Integer> indentSizes = new Stack<>();
    int yycolumn;

    public IElementType dedentRoot(IElementType type) {
        lineEnded = false;
        if (ignoreIndent || yycolumn > 0 || indent <= 0 || indentSizes.empty()) {
            return type;
        }

        dedent();
        yypushback(yylength());

        return GdTypes.DEDENT;
    }

    public boolean dedentSpaces() {
        if (indent <= 0 || indentSizes.empty()) { // For EOF rule
            return false;
        }

        indented = false;
        dedent();

        if (indent > yylength()) {
            yypushback(yylength());
        }

        return true;
    }

    private void dedent() {
        indent = Math.max(0, indent - indentSizes.pop());
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GdLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL);
        return GdTypes.STRING;
            }  // fall though
            case 261: break;
            default:
              {
                if (yystate() == AWAIT_NEW_LINE && !lineEnded) {
        yybegin(YYINITIAL);
        return GdTypes.NEW_LINE;
    } else if (dedentSpaces()) {
        return GdTypes.DEDENT;
    } else {
        return null;
    }
              }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { continue;
            } 
            // fall through
          case 96: break;
          case 2: 
            { return GdTypes.BAD_CHARACTER;
            } 
            // fall through
          case 97: break;
          case 3: 
            { return dedentRoot(GdTypes.OR);
            } 
            // fall through
          case 98: break;
          case 4: 
            { return dedentRoot(GdTypes.NUMBER);
            } 
            // fall through
          case 99: break;
          case 5: 
            { return dedentRoot(GdTypes.DOT);
            } 
            // fall through
          case 100: break;
          case 6: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 101: break;
          case 7: 
            { if (!ignoreIndent && yycolumn == 0) {
            int spaces = yytext().length();
//            if (spaces > indent && !indented) {
            if (spaces > indent) {
                indentSizes.push(spaces - indent);
                indent = spaces;
                //yypushback(yylength());
                indented = true;

                lastState = yystate();
                yybegin(CREATE_INDENT);

                // return GdTypes.INDENT;
                return TokenType.WHITE_SPACE;
            } else if (indent > spaces) {
                indented = false;
                dedentSpaces();
                return GdTypes.DEDENT;
            }
        }
        indented = false;

        return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 102: break;
          case 8: 
            { return dedentRoot(GdTypes.UNDER);
            } 
            // fall through
          case 103: break;
          case 9: 
            { return dedentRoot(GdTypes.IDENTIFIER);
            } 
            // fall through
          case 104: break;
          case 10: 
            { return dedentRoot(GdTypes.MINUS);
            } 
            // fall through
          case 105: break;
          case 11: 
            { if (!lineEnded) {
              if (yystate() == AWAIT_NEW_LINE || yystate() == AWAIT_NEW_LINE_ONCE) {
                  if (yystate() == AWAIT_NEW_LINE_ONCE) {
                      yybegin(YYINITIAL);
                  }
                  lineEnded = true;
                  yypushback(yylength());
                  return GdTypes.NEW_LINE;
              }
          }

          return GdTypes.COMMENT;
            } 
            // fall through
          case 106: break;
          case 12: 
            { return dedentRoot(GdTypes.ANNOTATOR);
            } 
            // fall through
          case 107: break;
          case 13: 
            { return dedentRoot(GdTypes.NODE_PATH_LEX);
            } 
            // fall through
          case 108: break;
          case 14: 
            { return dedentRoot(GdTypes.DIV);
            } 
            // fall through
          case 109: break;
          case 15: 
            { return dedentRoot(GdTypes.MOD);
            } 
            // fall through
          case 110: break;
          case 16: 
            { return dedentRoot(GdTypes.PLUS);
            } 
            // fall through
          case 111: break;
          case 17: 
            { return dedentRoot(GdTypes.EQ);
            } 
            // fall through
          case 112: break;
          case 18: 
            { return dedentRoot(GdTypes.MUL);
            } 
            // fall through
          case 113: break;
          case 19: 
            { return dedentRoot(GdTypes.AND);
            } 
            // fall through
          case 114: break;
          case 20: 
            { return GdTypes.TEST_OPERATOR;
            } 
            // fall through
          case 115: break;
          case 21: 
            { return dedentRoot(GdTypes.NEGATE);
            } 
            // fall through
          case 116: break;
          case 22: 
            { return dedentRoot(GdTypes.COMMA);
            } 
            // fall through
          case 117: break;
          case 23: 
            { return dedentRoot(GdTypes.LCBR);
            } 
            // fall through
          case 118: break;
          case 24: 
            { return dedentRoot(GdTypes.RCBR);
            } 
            // fall through
          case 119: break;
          case 25: 
            { return dedentRoot(GdTypes.COLON);
            } 
            // fall through
          case 120: break;
          case 26: 
            { lineEnded = true; return GdTypes.SEMICON;
            } 
            // fall through
          case 121: break;
          case 27: 
            { ignoreIndent = true; return dedentRoot(GdTypes.LRBR);
            } 
            // fall through
          case 122: break;
          case 28: 
            { ignoreIndent = false; return dedentRoot(GdTypes.RRBR);
            } 
            // fall through
          case 123: break;
          case 29: 
            { return dedentRoot(GdTypes.LSBR);
            } 
            // fall through
          case 124: break;
          case 30: 
            { return dedentRoot(GdTypes.RSBR);
            } 
            // fall through
          case 125: break;
          case 31: 
            { return dedentRoot(GdTypes.XOR);
            } 
            // fall through
          case 126: break;
          case 32: 
            { return dedentRoot(GdTypes.NOT);
            } 
            // fall through
          case 127: break;
          case 33: 
            { if (!ignoreIndent && !lineEnded) {
              lineEnded = true;
              yypushback(yylength());
              return GdTypes.NEW_LINE;
          }

          return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 128: break;
          case 34: 
            { yybegin(YYINITIAL);
          if (lineEnded) { // For signal, etc.
              return TokenType.WHITE_SPACE;
          }
          yypushback(yylength());

          return GdTypes.NEW_LINE;
            } 
            // fall through
          case 129: break;
          case 35: 
            { enumValEnded = false;
          return GdTypes.IDENTIFIER;
            } 
            // fall through
          case 130: break;
          case 36: 
            { if (enumValEnded) {
              return TokenType.WHITE_SPACE;
          }
          enumValEnded = true;

          return GdTypes.NEW_LINE;
            } 
            // fall through
          case 131: break;
          case 37: 
            { enumValEnded = true;
          return GdTypes.COMMA;
            } 
            // fall through
          case 132: break;
          case 38: 
            { enumValEnded = true;
          return GdTypes.LCBR;
            } 
            // fall through
          case 133: break;
          case 39: 
            { yybegin(AWAIT_NEW_LINE_ONCE);
          enumValEnded = false;
          lineEnded = false;
          return GdTypes.RCBR;
            } 
            // fall through
          case 134: break;
          case 40: 
            { yybegin(lastState);
        yypushback(yylength());

        return GdTypes.INDENT;
            } 
            // fall through
          case 135: break;
          case 41: 
            { if (!oppening.equals("\"\"\"")) {
            yybegin(lastState);
            return TokenType.BAD_CHARACTER;
        }
            } 
            // fall through
          case 136: break;
          case 42: 
            { if (oppening.equals(yytext().toString())) {
            yybegin(lastState);
            return GdTypes.STRING;
        }
            } 
            // fall through
          case 137: break;
          case 43: 
            { return dedentRoot(GdTypes.OROR);
            } 
            // fall through
          case 138: break;
          case 44: 
            { return GdTypes.ASSIGN;
            } 
            // fall through
          case 139: break;
          case 45: 
            { return dedentRoot(GdTypes.DOTDOT);
            } 
            // fall through
          case 140: break;
          case 46: 
            { return dedentRoot(GdTypes.MMINUS);
            } 
            // fall through
          case 141: break;
          case 47: 
            { return dedentRoot(GdTypes.RET);
            } 
            // fall through
          case 142: break;
          case 48: 
            { return GdTypes.STRING;
            } 
            // fall through
          case 143: break;
          case 49: 
            { return dedentRoot(GdTypes.PPLUS);
            } 
            // fall through
          case 144: break;
          case 50: 
            { return dedentRoot(GdTypes.ANDAND);
            } 
            // fall through
          case 145: break;
          case 51: 
            { return dedentRoot(GdTypes.LBSHIFT);
            } 
            // fall through
          case 146: break;
          case 52: 
            { return dedentRoot(GdTypes.RBSHIFT);
            } 
            // fall through
          case 147: break;
          case 53: 
            { return dedentRoot(GdTypes.AS);
            } 
            // fall through
          case 148: break;
          case 54: 
            { return dedentRoot(GdTypes.IF);
            } 
            // fall through
          case 149: break;
          case 55: 
            { return dedentRoot(GdTypes.IN);
            } 
            // fall through
          case 150: break;
          case 56: 
            { return dedentRoot(GdTypes.IS);
            } 
            // fall through
          case 151: break;
          case 57: 
            { return dedentRoot(GdTypes.PI);
            } 
            // fall through
          case 152: break;
          case 58: 
            { return dedentRoot(GdTypes.CEQ);
            } 
            // fall through
          case 153: break;
          case 59: 
            { return dedentRoot(GdTypes.FOR);
            } 
            // fall through
          case 154: break;
          case 60: 
            { yybegin(AWAIT_NEW_LINE); return dedentRoot(GdTypes.SET);
            } 
            // fall through
          case 155: break;
          case 61: 
            { if (yycolumn == 0) { yybegin(AWAIT_NEW_LINE_ONCE); } else { yybegin(AWAIT_NEW_LINE); } return dedentRoot(GdTypes.VAR);
            } 
            // fall through
          case 156: break;
          case 62: 
            { yybegin(AWAIT_NEW_LINE); return dedentRoot(GdTypes.GET);
            } 
            // fall through
          case 157: break;
          case 63: 
            { return dedentRoot(GdTypes.INF);
            } 
            // fall through
          case 158: break;
          case 64: 
            { return dedentRoot(GdTypes.INT);
            } 
            // fall through
          case 159: break;
          case 65: 
            { return dedentRoot(GdTypes.TAU);
            } 
            // fall through
          case 160: break;
          case 66: 
            { return dedentRoot(GdTypes.NAN);
            } 
            // fall through
          case 161: break;
          case 67: 
            { yybegin(AWAIT_NEW_LINE); return dedentRoot(GdTypes.FUNC);
            } 
            // fall through
          case 162: break;
          case 68: 
            { return dedentRoot(GdTypes.BOOL);
            } 
            // fall through
          case 163: break;
          case 69: 
            { yybegin(AWAIT_ENUM_SEPARATOR); enumValEnded = true; return GdTypes.ENUM;
            } 
            // fall through
          case 164: break;
          case 70: 
            { return dedentRoot(GdTypes.ELSE);
            } 
            // fall through
          case 165: break;
          case 71: 
            { return dedentRoot(GdTypes.ELIF);
            } 
            // fall through
          case 166: break;
          case 72: 
            { return dedentRoot(GdTypes.TRUE);
            } 
            // fall through
          case 167: break;
          case 73: 
            { return dedentRoot(GdTypes.NULL);
            } 
            // fall through
          case 168: break;
          case 74: 
            { return dedentRoot(GdTypes.SELF);
            } 
            // fall through
          case 169: break;
          case 75: 
            { return dedentRoot(GdTypes.VOID);
            } 
            // fall through
          case 170: break;
          case 76: 
            { yybegin(AWAIT_NEW_LINE); return dedentRoot(GdTypes.PASS);
            } 
            // fall through
          case 171: break;
          case 77: 
            { return dedentRoot(GdTypes.FLOAT);
            } 
            // fall through
          case 172: break;
          case 78: 
            { return dedentRoot(GdTypes.FALSE);
            } 
            // fall through
          case 173: break;
          case 79: 
            { yybegin(AWAIT_NEW_LINE); return dedentRoot(GdTypes.BREAK);
            } 
            // fall through
          case 174: break;
          case 80: 
            { yybegin(AWAIT_NEW_LINE); return dedentRoot(GdTypes.CLASS);
            } 
            // fall through
          case 175: break;
          case 81: 
            { if (yycolumn == 0) { yybegin(AWAIT_NEW_LINE_ONCE); } else { yybegin(AWAIT_NEW_LINE); } return dedentRoot(GdTypes.CONST);
            } 
            // fall through
          case 176: break;
          case 82: 
            { return dedentRoot(GdTypes.AWAIT);
            } 
            // fall through
          case 177: break;
          case 83: 
            { yybegin(AWAIT_NEW_LINE); return dedentRoot(GdTypes.MATCH);
            } 
            // fall through
          case 178: break;
          case 84: 
            { return dedentRoot(GdTypes.WHILE);
            } 
            // fall through
          case 179: break;
          case 85: 
            { yybegin(AWAIT_NEW_LINE); return dedentRoot(GdTypes.STATIC);
            } 
            // fall through
          case 180: break;
          case 86: 
            { yybegin(AWAIT_NEW_LINE_ONCE); return GdTypes.SIGNAL;
            } 
            // fall through
          case 181: break;
          case 87: 
            { return dedentRoot(GdTypes.ASSERT);
            } 
            // fall through
          case 182: break;
          case 88: 
            { return dedentRoot(GdTypes.VARARG);
            } 
            // fall through
          case 183: break;
          case 89: 
            { yybegin(AWAIT_NEW_LINE); return dedentRoot(GdTypes.RETURN);
            } 
            // fall through
          case 184: break;
          case 90: 
            { return dedentRoot(GdTypes.STR);
            } 
            // fall through
          case 185: break;
          case 91: 
            { yybegin(AWAIT_NEW_LINE_ONCE); return dedentRoot(GdTypes.EXTENDS);
            } 
            // fall through
          case 186: break;
          case 92: 
            { return dedentRoot(GdTypes.PRELOAD);
            } 
            // fall through
          case 187: break;
          case 93: 
            { yybegin(AWAIT_NEW_LINE); return dedentRoot(GdTypes.CONTINUE);
            } 
            // fall through
          case 188: break;
          case 94: 
            { yybegin(AWAIT_NEW_LINE); return dedentRoot(GdTypes.BREAKPOINT);
            } 
            // fall through
          case 189: break;
          case 95: 
            { yybegin(AWAIT_NEW_LINE_ONCE); return dedentRoot(GdTypes.CLASS_NAME);
            } 
            // fall through
          case 190: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
