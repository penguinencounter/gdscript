/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package gdscript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import gdscript.psi.GdTokenType;import gdscript.psi.GdTypes;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Gd.flex</tt>
 */
class GdLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CREATE_INDENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\3\2\22\1\3\22\0\1\5\1\37\1\21\1\24\1\27\1\30\1\20\1\23\1\66\1"+
    "\67\1\34\1\32\1\64\1\17\1\10\1\6\1\11\1\15\10\2\1\31\1\65\1\35\1\33\1\36\1"+
    "\0\1\25\6\13\24\26\1\70\1\4\1\71\1\74\1\7\1\0\1\46\1\14\1\44\1\42\1\16\1\55"+
    "\1\53\1\62\1\57\1\26\1\60\1\45\1\47\1\41\1\52\1\56\1\26\1\51\1\43\1\40\1\54"+
    "\1\50\1\61\1\12\1\63\1\26\1\72\1\1\1\73\1\75\6\0\1\22\242\0\2\22\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\3\3\11\1\12\1\13\2\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\2\24"+
    "\1\25\16\11\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\7\40\1\41\1\42\2\0"+
    "\1\43\1\44\1\45\2\0\4\11\1\46\1\47\1\50"+
    "\2\0\1\51\2\0\1\52\1\53\1\54\1\24\1\55"+
    "\1\56\13\11\1\57\13\11\1\60\1\61\1\62\1\11"+
    "\4\40\1\3\1\0\2\3\5\11\1\51\1\0\1\11"+
    "\1\63\1\25\1\11\1\64\6\11\1\50\3\11\1\65"+
    "\3\11\1\66\1\11\1\67\3\11\1\70\1\11\1\40"+
    "\1\3\2\11\1\71\1\72\1\73\2\0\1\74\1\75"+
    "\1\76\12\11\1\77\3\11\1\100\1\101\2\11\1\40"+
    "\1\102\1\11\1\0\1\11\1\103\1\11\1\104\1\11"+
    "\1\105\1\106\1\107\4\11\1\110\1\11\1\111\2\11"+
    "\1\112\1\113\1\114\2\11\1\115\1\116\1\117\1\120"+
    "\1\121\1\11\1\122\5\11\1\123\4\11\1\124\1\125"+
    "\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\174\0\u0136\0\u0174"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u01f0\0\u02aa\0\u02e8\0\u0326"+
    "\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516"+
    "\0\u0554\0\u0592\0\u01b2\0\u05d0\0\u060e\0\u0592\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a"+
    "\0\u08b8\0\u08f6\0\u0934\0\u0972\0\174\0\174\0\174\0\174"+
    "\0\174\0\174\0\174\0\174\0\174\0\174\0\u09b0\0\u09ee"+
    "\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u01f0\0\174\0\u0b62"+
    "\0\u0ba0\0\174\0\174\0\174\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\174\0\174\0\174\0\u0d52\0\u0d90\0\u0dce"+
    "\0\u03e0\0\u0e0c\0\174\0\174\0\174\0\174\0\174\0\174"+
    "\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc"+
    "\0\u103a\0\u1078\0\u10b6\0\u01f0\0\u10f4\0\u1132\0\u1170\0\u11ae"+
    "\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e"+
    "\0\u01f0\0\u01f0\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512"+
    "\0\u1550\0\u0bde\0\u0c1c\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686"+
    "\0\174\0\u16c4\0\u1702\0\u01f0\0\u01f0\0\u1740\0\u01f0\0\u177e"+
    "\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u01f0\0\u18f2\0\u1930"+
    "\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u01f0\0\u1aa4\0\u01f0"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\u01f0\0\u1b9c\0\u1bda\0\u1550\0\u1c18"+
    "\0\u1c56\0\u01f0\0\u01f0\0\u01f0\0\u1c94\0\u1cd2\0\u01f0\0\u01f0"+
    "\0\u01f0\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84"+
    "\0\u1ec2\0\u1f00\0\u1f3e\0\u01f0\0\u1f7c\0\u1fba\0\u1ff8\0\u01f0"+
    "\0\u01f0\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa"+
    "\0\u01f0\0\u21e8\0\u2226\0\u2264\0\u01f0\0\u01f0\0\u01f0\0\u22a2"+
    "\0\u22e0\0\u231e\0\u235c\0\u01f0\0\u239a\0\u01f0\0\u23d8\0\u2416"+
    "\0\174\0\u01f0\0\u01f0\0\u2454\0\u2492\0\u01f0\0\u01f0\0\u01f0"+
    "\0\u24d0\0\u01f0\0\u250e\0\u01f0\0\u254c\0\u258a\0\u25c8\0\u2606"+
    "\0\u2644\0\u01f0\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u01f0\0\u01f0"+
    "\0\u01f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\2\15\1\16\1\5\1\17\1\20\1\21"+
    "\1\22\1\3\1\23\1\24\1\25\1\15\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\15\1\41\1\42\1\15\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\15\1\51\1\52\1\53\1\15"+
    "\1\54\2\15\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\3\67\1\6\1\70\1\71"+
    "\12\67\1\72\1\73\1\3\1\74\1\75\51\67\77\0"+
    "\1\76\1\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\4\0\1\77\4\0\24\15\14\0\1\5\4\0\1\5"+
    "\1\100\1\5\3\0\1\5\1\101\62\0\1\102\75\0"+
    "\1\102\1\0\1\10\16\0\1\103\104\0\1\77\43\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\24\15\22\0\1\104\67\0\1\5\4\0\1\5\1\100"+
    "\1\5\1\105\1\0\1\106\1\5\1\101\60\0\2\15"+
    "\3\0\2\15\1\0\6\15\7\0\1\15\11\0\11\15"+
    "\1\107\12\15\13\0\2\15\3\0\2\15\1\0\1\15"+
    "\1\110\4\15\7\0\1\15\11\0\1\15\1\111\3\15"+
    "\1\112\16\15\31\0\1\113\13\0\1\77\2\0\1\114"+
    "\57\0\1\115\1\116\11\0\1\77\42\0\3\116\1\0"+
    "\1\117\14\116\1\120\54\116\3\121\1\0\1\122\16\121"+
    "\1\123\52\121\3\24\1\0\72\24\7\0\1\25\2\0"+
    "\3\25\1\0\1\25\7\0\1\25\11\0\24\25\14\0"+
    "\1\26\3\0\11\26\2\0\1\26\4\0\1\26\1\0"+
    "\2\26\6\0\24\26\14\0\1\26\3\0\11\26\2\0"+
    "\1\26\4\0\1\26\1\0\2\26\1\0\1\77\4\0"+
    "\24\26\45\0\1\124\74\0\1\125\1\77\75\0\1\126"+
    "\75\0\1\126\1\0\1\127\73\0\1\126\2\0\1\130"+
    "\40\0\2\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\11\0\11\15\1\131\12\15\13\0\2\15\3\0\2\15"+
    "\1\0\6\15\7\0\1\15\11\0\6\15\1\132\3\15"+
    "\1\133\1\15\1\134\7\15\13\0\2\15\3\0\2\15"+
    "\1\0\5\15\1\135\7\0\1\15\11\0\1\136\13\15"+
    "\1\137\2\15\1\140\4\15\13\0\2\15\3\0\2\15"+
    "\1\0\6\15\7\0\1\15\11\0\5\15\1\141\4\15"+
    "\1\142\11\15\13\0\2\15\3\0\2\15\1\0\6\15"+
    "\7\0\1\15\11\0\1\15\1\143\1\15\1\144\15\15"+
    "\1\145\2\15\13\0\2\15\3\0\2\15\1\0\6\15"+
    "\7\0\1\15\11\0\6\15\1\146\15\15\13\0\2\15"+
    "\3\0\2\15\1\0\6\15\7\0\1\15\11\0\6\15"+
    "\1\147\3\15\1\150\11\15\13\0\2\15\3\0\2\15"+
    "\1\0\5\15\1\151\7\0\1\15\11\0\24\15\13\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\11\15\1\76\12\15\13\0\2\15\3\0\2\15\1\0"+
    "\5\15\1\152\7\0\1\15\11\0\24\15\13\0\2\15"+
    "\3\0\2\15\1\0\6\15\7\0\1\15\11\0\6\15"+
    "\1\153\3\15\1\154\1\15\1\155\7\15\13\0\2\15"+
    "\3\0\2\15\1\0\6\15\7\0\1\15\11\0\6\15"+
    "\1\156\5\15\1\157\7\15\13\0\2\15\3\0\2\15"+
    "\1\0\6\15\7\0\1\15\11\0\1\15\1\160\1\15"+
    "\1\161\11\15\1\162\6\15\13\0\2\15\3\0\2\15"+
    "\1\0\6\15\7\0\1\15\11\0\22\15\1\163\1\15"+
    "\12\0\3\67\1\0\16\67\1\0\56\67\1\102\16\67"+
    "\1\0\56\67\1\102\1\67\1\71\14\67\1\0\56\67"+
    "\1\0\15\67\1\164\1\0\53\67\3\164\1\0\1\165"+
    "\14\164\1\166\1\116\53\164\3\74\1\0\1\167\15\74"+
    "\1\121\1\67\52\74\3\75\1\0\16\75\1\24\53\75"+
    "\2\0\1\170\4\0\1\170\1\0\1\170\3\0\1\170"+
    "\77\0\1\171\60\0\1\172\4\0\1\172\1\0\1\172"+
    "\1\0\4\172\23\0\1\172\1\0\1\172\1\0\1\172"+
    "\6\0\1\172\27\0\1\173\1\0\1\173\3\0\1\173"+
    "\61\0\2\15\3\0\2\15\1\0\5\15\1\174\7\0"+
    "\1\15\11\0\24\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\1\175\23\15\13\0\2\15"+
    "\3\0\2\15\1\0\6\15\7\0\1\15\11\0\14\15"+
    "\1\176\7\15\13\0\2\15\3\0\2\15\1\0\6\15"+
    "\7\0\1\15\11\0\3\15\1\177\13\15\1\200\4\15"+
    "\12\0\3\116\1\0\1\117\14\116\1\201\57\116\1\0"+
    "\16\116\1\0\53\116\21\0\1\202\54\0\3\121\1\0"+
    "\16\121\1\0\53\121\1\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\14\15\1\203\7\15\13\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\1\15\1\204\22\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\1\205\23\15\13\0\2\15"+
    "\3\0\2\15\1\0\6\15\7\0\1\15\11\0\5\15"+
    "\1\206\16\15\13\0\2\15\3\0\2\15\1\0\6\15"+
    "\7\0\1\15\11\0\1\207\4\15\1\210\16\15\13\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\6\15\1\211\15\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\16\15\1\212\5\15\13\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\13\15\1\213\10\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\6\15\1\214\15\15\13\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\1\15\1\215\22\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\2\15\1\216\21\15\13\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\6\15\1\217\15\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\1\220\2\15\1\221\20\15"+
    "\13\0\2\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\11\0\11\15\1\222\12\15\13\0\2\15\3\0\2\15"+
    "\1\0\6\15\7\0\1\15\11\0\17\15\1\223\4\15"+
    "\13\0\2\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\11\0\1\224\6\15\1\225\14\15\13\0\2\15\3\0"+
    "\2\15\1\0\6\15\7\0\1\15\11\0\1\226\23\15"+
    "\13\0\2\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\11\0\5\15\1\227\16\15\13\0\2\15\3\0\2\15"+
    "\1\0\6\15\7\0\1\15\11\0\11\15\1\230\12\15"+
    "\13\0\2\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\11\0\1\15\1\231\22\15\13\0\2\15\3\0\2\15"+
    "\1\0\6\15\7\0\1\15\11\0\3\15\1\232\20\15"+
    "\13\0\2\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\11\0\16\15\1\233\5\15\13\0\2\15\3\0\2\15"+
    "\1\0\6\15\7\0\1\15\11\0\15\15\1\234\6\15"+
    "\13\0\2\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\11\0\17\15\1\235\4\15\12\0\3\164\1\0\1\165"+
    "\14\164\1\67\1\116\56\164\1\0\16\164\1\0\53\164"+
    "\3\67\1\0\15\67\1\236\1\0\53\67\3\74\1\0"+
    "\16\74\1\0\53\74\2\0\1\170\4\0\1\170\1\0"+
    "\1\170\3\0\1\170\1\101\61\0\1\237\6\0\1\237"+
    "\3\0\1\237\61\0\2\15\3\0\2\15\1\0\6\15"+
    "\7\0\1\15\11\0\6\15\1\240\15\15\13\0\2\15"+
    "\3\0\2\15\1\0\5\15\1\241\7\0\1\15\11\0"+
    "\24\15\13\0\2\15\3\0\2\15\1\0\6\15\7\0"+
    "\1\15\11\0\7\15\1\242\14\15\13\0\2\15\3\0"+
    "\2\15\1\0\5\15\1\243\7\0\1\15\11\0\24\15"+
    "\13\0\2\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\11\0\15\15\1\244\6\15\12\0\4\202\1\245\14\202"+
    "\1\246\54\202\1\0\2\15\3\0\2\15\1\0\5\15"+
    "\1\247\7\0\1\15\11\0\24\15\13\0\2\15\3\0"+
    "\2\15\1\0\6\15\7\0\1\15\11\0\5\15\1\250"+
    "\16\15\13\0\2\15\3\0\2\15\1\0\6\15\7\0"+
    "\1\15\11\0\15\15\1\251\6\15\13\0\2\15\3\0"+
    "\2\15\1\0\6\15\7\0\1\15\11\0\1\252\23\15"+
    "\13\0\2\15\3\0\2\15\1\0\5\15\1\253\7\0"+
    "\1\15\11\0\24\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\1\15\1\254\22\15\13\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\3\15\1\255\20\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\1\256\2\15\1\257\20\15"+
    "\13\0\2\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\11\0\17\15\1\260\4\15\13\0\2\15\3\0\2\15"+
    "\1\0\6\15\7\0\1\15\11\0\4\15\1\261\17\15"+
    "\13\0\2\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\11\0\1\262\23\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\6\15\1\263\15\15\13\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\2\15\1\264\21\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\14\15\1\265\7\15\13\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\12\15\1\266\11\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\3\15\1\267\20\15\13\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\4\15\1\270\17\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\3\15\1\271\20\15\13\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\16\15\1\272\5\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\5\15\1\273\16\15\12\0"+
    "\3\236\1\202\1\274\14\236\1\67\1\202\53\236\1\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\20\15\1\275\3\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\1\15\1\276\22\15\12\0"+
    "\3\202\1\0\16\202\1\0\53\202\21\0\1\277\55\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\17\15\1\300\4\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\11\15\1\301\12\15\13\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\6\15\1\302\15\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\3\15\1\303\20\15\13\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\17\15\1\304\4\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\1\305\23\15\13\0\2\15"+
    "\3\0\2\15\1\0\6\15\7\0\1\15\11\0\1\306"+
    "\23\15\13\0\2\15\3\0\2\15\1\0\6\15\7\0"+
    "\1\15\11\0\22\15\1\307\1\15\13\0\2\15\3\0"+
    "\2\15\1\0\5\15\1\310\7\0\1\15\11\0\24\15"+
    "\13\0\2\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\11\0\11\15\1\311\12\15\13\0\2\15\3\0\2\15"+
    "\1\0\6\15\7\0\1\15\11\0\11\15\1\312\12\15"+
    "\13\0\2\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\11\0\1\313\23\15\13\0\2\15\3\0\2\15\1\0"+
    "\5\15\1\314\7\0\1\15\11\0\24\15\13\0\2\15"+
    "\3\0\2\15\1\0\5\15\1\315\7\0\1\15\11\0"+
    "\24\15\13\0\2\15\3\0\2\15\1\0\5\15\1\316"+
    "\7\0\1\15\11\0\24\15\12\0\3\236\1\0\16\236"+
    "\1\0\53\236\1\0\2\15\3\0\2\15\1\0\6\15"+
    "\7\0\1\15\11\0\16\15\1\317\5\15\13\0\2\15"+
    "\3\0\2\15\1\0\6\15\7\0\1\15\11\0\2\15"+
    "\1\320\21\15\33\0\1\321\55\0\2\15\3\0\2\15"+
    "\1\0\6\15\7\0\1\15\11\0\4\15\1\322\17\15"+
    "\13\0\2\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\11\0\5\15\1\323\16\15\13\0\2\15\3\0\1\15"+
    "\1\324\1\0\6\15\7\0\1\15\11\0\24\15\13\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\1\15\1\325\22\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\11\15\1\326\12\15\13\0"+
    "\2\15\3\0\2\15\1\0\6\15\7\0\1\15\11\0"+
    "\13\15\1\327\10\15\13\0\2\15\3\0\2\15\1\0"+
    "\6\15\7\0\1\15\11\0\1\15\1\330\22\15\13\0"+
    "\2\15\3\0\2\15\1\0\5\15\1\331\7\0\1\15"+
    "\11\0\24\15\13\0\2\15\3\0\2\15\1\0\6\15"+
    "\7\0\1\15\11\0\11\15\1\332\12\15\13\0\2\15"+
    "\3\0\2\15\1\0\6\15\7\0\1\15\11\0\12\15"+
    "\1\333\11\15\13\0\2\15\3\0\2\15\1\0\6\15"+
    "\7\0\1\15\11\0\3\15\1\334\20\15\13\0\2\15"+
    "\3\0\2\15\1\0\6\15\7\0\1\15\11\0\1\15"+
    "\1\335\22\15\13\0\2\15\3\0\2\15\1\0\6\15"+
    "\7\0\1\15\11\0\14\15\1\336\7\15\13\0\2\15"+
    "\3\0\2\15\1\0\6\15\7\0\1\15\11\0\3\15"+
    "\1\337\20\15\13\0\2\15\3\0\2\15\1\0\6\15"+
    "\7\0\1\15\11\0\17\15\1\340\4\15\13\0\2\15"+
    "\3\0\2\15\1\0\6\15\7\0\1\15\11\0\6\15"+
    "\1\341\15\15\13\0\2\15\3\0\2\15\1\0\5\15"+
    "\1\342\7\0\1\15\11\0\24\15\13\0\2\15\3\0"+
    "\2\15\1\0\6\15\7\0\1\15\11\0\23\15\1\343"+
    "\13\0\2\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\11\0\1\15\1\344\22\15\13\0\2\15\3\0\2\15"+
    "\1\0\6\15\7\0\1\15\11\0\7\15\1\345\14\15"+
    "\13\0\2\15\3\0\2\15\1\0\6\15\7\0\1\15"+
    "\11\0\1\15\1\346\22\15\13\0\2\15\3\0\2\15"+
    "\1\0\6\15\7\0\1\15\11\0\1\347\23\15\13\0"+
    "\2\15\3\0\2\15\1\0\5\15\1\350\7\0\1\15"+
    "\11\0\24\15\13\0\2\15\3\0\2\15\1\0\6\15"+
    "\7\0\1\15\11\0\4\15\1\351\17\15\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10106];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\46\1\12\11\10\1\1\11"+
    "\2\0\3\11\2\0\4\1\3\11\2\0\1\1\2\0"+
    "\6\11\40\1\1\0\7\1\1\11\1\0\42\1\2\0"+
    "\30\1\1\0\21\1\1\11\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    String oppening = "";
    int lastState = YYINITIAL;
    boolean lineEnded = false;
    int indent = 0;
    Stack<Integer> indentSizes = new Stack<>();
    int yycolumn;
    boolean eofFinished = false; // TODO remove?

    boolean newLineProcessed = false;
    // For signals and such, where Indents/NewLines do not matter
    boolean ignoreIndent = false;
    int ignored = 0;

    public IElementType dedentRoot(IElementType type) {
        newLineProcessed = false;
        lineEnded = false;
        if (ignored > 0 || yycolumn > 0 || indent <= 0 || indentSizes.empty()) {
            return type;
        }

        dedent();
        yypushback(yylength());

        return GdTypes.DEDENT;
    }

    public boolean dedentSpaces() {
        newLineProcessed = false;
        if (ignored > 0 || indent <= 0 || indentSizes.empty()) { // For EOF rule
            return false;
        }

        dedent();

//        if (indent > yylength()) {
            yypushback(yylength());
//        }

        return true;
    }

    private void dedent() {
        indent = Math.max(0, indent - indentSizes.pop());
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GdLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
              {
                if (yycolumn > 0 && !eofFinished) {
        eofFinished = true;
        return GdTypes.NEW_LINE;
    }

    if (indentSizes.empty()) {
        return null;
    }

    indentSizes.pop();
    yypushback(yylength());
    return GdTypes.DEDENT;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 87: break;
          case 2: 
            { return dedentRoot(GdTypes.OR);
            } 
            // fall through
          case 88: break;
          case 3: 
            { return dedentRoot(GdTypes.NUMBER);
            } 
            // fall through
          case 89: break;
          case 4: 
            { if (yycolumn == 0) {
            return TokenType.WHITE_SPACE;
        } else if (ignored > 0) {
            if (ignored == 0) {
                ignoreIndent = false;
                return GdTypes.NEW_LINE;
            } else {
                return TokenType.WHITE_SPACE;
            }
        }

        if (newLineProcessed) {
            return TokenType.WHITE_SPACE;
        }

        newLineProcessed = true;
        return GdTypes.NEW_LINE;
            } 
            // fall through
          case 90: break;
          case 5: 
            { if (yycolumn == 0) {
            int spaces = yytext().length();
            if (spaces > indent) {
                if (ignored > 0) {
                    return TokenType.WHITE_SPACE;
                }

                indentSizes.push(spaces - indent);
                indent = spaces;

                return GdTypes.INDENT;
            } else if (indent > spaces) {
                dedentSpaces();
                return GdTypes.DEDENT;
            }
        }

        return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 91: break;
          case 6: 
            { return dedentRoot(GdTypes.DIV);
            } 
            // fall through
          case 92: break;
          case 7: 
            { return dedentRoot(GdTypes.UNDER);
            } 
            // fall through
          case 93: break;
          case 8: 
            { return dedentRoot(GdTypes.DOT);
            } 
            // fall through
          case 94: break;
          case 9: 
            { return dedentRoot(GdTypes.IDENTIFIER);
            } 
            // fall through
          case 95: break;
          case 10: 
            { return dedentRoot(GdTypes.MINUS);
            } 
            // fall through
          case 96: break;
          case 11: 
            { return dedentRoot(GdTypes.AND);
            } 
            // fall through
          case 97: break;
          case 12: 
            { lineEnded = true; IElementType ret = dedentRoot(GdTypes.COMMENT); newLineProcessed = true; return ret;
            } 
            // fall through
          case 98: break;
          case 13: 
            { return dedentRoot(GdTypes.ANNOTATOR);
            } 
            // fall through
          case 99: break;
          case 14: 
            { return dedentRoot(GdTypes.NODE_PATH_LEX);
            } 
            // fall through
          case 100: break;
          case 15: 
            { return dedentRoot(GdTypes.MOD);
            } 
            // fall through
          case 101: break;
          case 16: 
            { return dedentRoot(GdTypes.COLON);
            } 
            // fall through
          case 102: break;
          case 17: 
            { return dedentRoot(GdTypes.PLUS);
            } 
            // fall through
          case 103: break;
          case 18: 
            { return dedentRoot(GdTypes.EQ);
            } 
            // fall through
          case 104: break;
          case 19: 
            { return dedentRoot(GdTypes.MUL);
            } 
            // fall through
          case 105: break;
          case 20: 
            { return GdTypes.TEST_OPERATOR;
            } 
            // fall through
          case 106: break;
          case 21: 
            { return dedentRoot(GdTypes.NEGATE);
            } 
            // fall through
          case 107: break;
          case 22: 
            { return dedentRoot(GdTypes.COMMA);
            } 
            // fall through
          case 108: break;
          case 23: 
            { lineEnded = true; return GdTypes.SEMICON;
            } 
            // fall through
          case 109: break;
          case 24: 
            { /*if (ignoreIndent) { ignored++; }*/ ignored++; return dedentRoot(GdTypes.LRBR);
            } 
            // fall through
          case 110: break;
          case 25: 
            { /*if (ignoreIndent) { if (--ignored == 0) { ignoreIndent = false; } }*/ ignored--; return GdTypes.RRBR;
            } 
            // fall through
          case 111: break;
          case 26: 
            { ignored++; return dedentRoot(GdTypes.LSBR);
            } 
            // fall through
          case 112: break;
          case 27: 
            { ignored--; return GdTypes.RSBR;
            } 
            // fall through
          case 113: break;
          case 28: 
            { /*if (ignoreIndent) { ignored++; }*/ignored++; return dedentRoot(GdTypes.LCBR);
            } 
            // fall through
          case 114: break;
          case 29: 
            { /*if (ignoreIndent) { if (--ignored == 0) { ignoreIndent = false; } } */ignored--; return GdTypes.RCBR;
            } 
            // fall through
          case 115: break;
          case 30: 
            { return dedentRoot(GdTypes.XOR);
            } 
            // fall through
          case 116: break;
          case 31: 
            { return dedentRoot(GdTypes.NOT);
            } 
            // fall through
          case 117: break;
          case 32: 
            { yybegin(lastState);
        yypushback(yylength());

        return GdTypes.INDENT;
            } 
            // fall through
          case 118: break;
          case 33: 
            { return dedentRoot(GdTypes.OROR);
            } 
            // fall through
          case 119: break;
          case 34: 
            { return GdTypes.ASSIGN;
            } 
            // fall through
          case 120: break;
          case 35: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 121: break;
          case 36: 
            { yypushback(1);
        return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 122: break;
          case 37: 
            { return dedentRoot(GdTypes.DOTDOT);
            } 
            // fall through
          case 123: break;
          case 38: 
            { return dedentRoot(GdTypes.MMINUS);
            } 
            // fall through
          case 124: break;
          case 39: 
            { return dedentRoot(GdTypes.RET);
            } 
            // fall through
          case 125: break;
          case 40: 
            { return dedentRoot(GdTypes.ANDAND);
            } 
            // fall through
          case 126: break;
          case 41: 
            { if (yytext().charAt(0) == '&') { return dedentRoot(GdTypes.STRING_NAME); } return dedentRoot(GdTypes.STRING);
            } 
            // fall through
          case 127: break;
          case 42: 
            { return dedentRoot(GdTypes.STRING);
            } 
            // fall through
          case 128: break;
          case 43: 
            { return dedentRoot(GdTypes.CEQ);
            } 
            // fall through
          case 129: break;
          case 44: 
            { return dedentRoot(GdTypes.PPLUS);
            } 
            // fall through
          case 130: break;
          case 45: 
            { return dedentRoot(GdTypes.LBSHIFT);
            } 
            // fall through
          case 131: break;
          case 46: 
            { return dedentRoot(GdTypes.RBSHIFT);
            } 
            // fall through
          case 132: break;
          case 47: 
            { return dedentRoot(GdTypes.AS);
            } 
            // fall through
          case 133: break;
          case 48: 
            { return dedentRoot(GdTypes.IN);
            } 
            // fall through
          case 134: break;
          case 49: 
            { return dedentRoot(GdTypes.IS);
            } 
            // fall through
          case 135: break;
          case 50: 
            { return dedentRoot(GdTypes.IF);
            } 
            // fall through
          case 136: break;
          case 51: 
            { return dedentRoot(GdTypes.NAN);
            } 
            // fall through
          case 137: break;
          case 52: 
            { return dedentRoot(GdTypes.SET);
            } 
            // fall through
          case 138: break;
          case 53: 
            { return dedentRoot(GdTypes.VAR);
            } 
            // fall through
          case 139: break;
          case 54: 
            { return dedentRoot(GdTypes.GET);
            } 
            // fall through
          case 140: break;
          case 55: 
            { return dedentRoot(GdTypes.FOR);
            } 
            // fall through
          case 141: break;
          case 56: 
            { return dedentRoot(GdTypes.INF);
            } 
            // fall through
          case 142: break;
          case 57: 
            { return dedentRoot(GdTypes.ENUM);
            } 
            // fall through
          case 143: break;
          case 58: 
            { return dedentRoot(GdTypes.ELSE);
            } 
            // fall through
          case 144: break;
          case 59: 
            { return dedentRoot(GdTypes.ELIF);
            } 
            // fall through
          case 145: break;
          case 60: 
            { return dedentRoot(GdTypes.TRUE);
            } 
            // fall through
          case 146: break;
          case 61: 
            { return dedentRoot(GdTypes.NULL);
            } 
            // fall through
          case 147: break;
          case 62: 
            { return dedentRoot(GdTypes.SELF);
            } 
            // fall through
          case 148: break;
          case 63: 
            { return dedentRoot(GdTypes.VOID);
            } 
            // fall through
          case 149: break;
          case 64: 
            { return dedentRoot(GdTypes.FUNC);
            } 
            // fall through
          case 150: break;
          case 65: 
            { return dedentRoot(GdTypes.PASS);
            } 
            // fall through
          case 151: break;
          case 66: 
            { return dedentRoot(GdTypes.BREAK);
            } 
            // fall through
          case 152: break;
          case 67: 
            { return dedentRoot(GdTypes.SUPER);
            } 
            // fall through
          case 153: break;
          case 68: 
            { return dedentRoot(GdTypes.CLASS);
            } 
            // fall through
          case 154: break;
          case 69: 
            { return dedentRoot(GdTypes.CONST);
            } 
            // fall through
          case 155: break;
          case 70: 
            { return dedentRoot(GdTypes.AWAIT);
            } 
            // fall through
          case 156: break;
          case 71: 
            { return dedentRoot(GdTypes.MATCH);
            } 
            // fall through
          case 157: break;
          case 72: 
            { return dedentRoot(GdTypes.FALSE);
            } 
            // fall through
          case 158: break;
          case 73: 
            { return dedentRoot(GdTypes.WHILE);
            } 
            // fall through
          case 159: break;
          case 74: 
            { return GdTypes.STRING;
            } 
            // fall through
          case 160: break;
          case 75: 
            { return dedentRoot(GdTypes.STATIC);
            } 
            // fall through
          case 161: break;
          case 76: 
            { return dedentRoot(GdTypes.SIGNAL);
            } 
            // fall through
          case 162: break;
          case 77: 
            { return dedentRoot(GdTypes.MASTER);
            } 
            // fall through
          case 163: break;
          case 78: 
            { return dedentRoot(GdTypes.VARARG);
            } 
            // fall through
          case 164: break;
          case 79: 
            { return dedentRoot(GdTypes.RETURN);
            } 
            // fall through
          case 165: break;
          case 80: 
            { return dedentRoot(GdTypes.REMOTE);
            } 
            // fall through
          case 166: break;
          case 81: 
            { return dedentRoot(GdTypes.PUPPET);
            } 
            // fall through
          case 167: break;
          case 82: 
            { return dedentRoot(GdTypes.EXTENDS);
            } 
            // fall through
          case 168: break;
          case 83: 
            { return dedentRoot(GdTypes.CONTINUE);
            } 
            // fall through
          case 169: break;
          case 84: 
            { return dedentRoot(GdTypes.BREAKPOINT);
            } 
            // fall through
          case 170: break;
          case 85: 
            { return dedentRoot(GdTypes.CLASS_NAME);
            } 
            // fall through
          case 171: break;
          case 86: 
            { return dedentRoot(GdTypes.REMOTESYNC);
            } 
            // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
