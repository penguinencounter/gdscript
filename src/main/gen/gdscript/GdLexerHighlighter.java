/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package gdscript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import gdscript.psi.GdTokenType;
import gdscript.psi.GdTypes;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>GdHighlight.flex</tt>
 */
class GdLexerHighlighter implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\17\2\0\1\4\22\0\1\5\1\35\1\16\1\21\1\24\1\25\1\32\1\20\1\73\1"+
    "\74\1\30\1\26\1\70\1\15\1\3\1\31\1\7\1\13\10\2\1\71\1\72\1\33\1\27\1\34\1"+
    "\0\1\22\1\62\4\23\1\65\2\23\1\60\4\23\1\64\1\23\1\57\2\23\1\55\1\61\1\63\5"+
    "\23\1\75\1\0\1\76\1\101\1\6\1\0\1\44\1\12\1\42\1\40\1\14\1\11\1\51\1\67\1"+
    "\54\1\23\1\56\1\43\1\45\1\37\1\50\1\53\1\23\1\47\1\41\1\36\1\52\1\46\1\66"+
    "\1\10\2\23\1\77\1\1\1\100\1\102\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\4\4\10\1\11\2\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\2\24\1\25\22\10"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\1\1\41\2\42\1\43\1\44"+
    "\2\0\1\45\2\0\11\10\1\46\1\47\1\0\2\13"+
    "\1\15\1\0\1\50\1\24\1\51\1\52\1\53\11\10"+
    "\1\54\10\10\1\55\1\56\1\57\1\10\1\60\4\10"+
    "\1\61\1\0\1\4\1\0\2\4\2\10\1\62\7\10"+
    "\1\0\1\10\1\25\1\10\1\63\5\10\1\51\3\10"+
    "\1\64\2\10\1\65\2\10\1\66\1\67\1\10\1\70"+
    "\1\71\1\10\1\4\2\10\1\72\1\10\1\73\1\10"+
    "\1\74\1\75\1\76\1\15\1\77\1\100\1\101\10\10"+
    "\1\102\1\10\1\103\3\10\1\104\1\105\1\106\5\10"+
    "\1\107\1\10\1\110\1\111\3\10\1\112\2\10\1\113"+
    "\1\114\2\10\1\115\1\116\1\10\1\117\1\10\1\120"+
    "\2\10\1\121\2\10\1\122\2\10\1\123\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\206\0\u0192"+
    "\0\u01d5\0\u0218\0\u01d5\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367"+
    "\0\206\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u0473"+
    "\0\u0473\0\u053c\0\u057f\0\u05c2\0\u04f9\0\u0605\0\u0648\0\u068b"+
    "\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3"+
    "\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\206"+
    "\0\u0abb\0\206\0\206\0\206\0\206\0\206\0\206\0\206"+
    "\0\206\0\206\0\u0afe\0\206\0\u0b41\0\206\0\u01d5\0\206"+
    "\0\u0b84\0\u0bc7\0\206\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\206\0\206"+
    "\0\u0eeb\0\u0f2e\0\206\0\u0f71\0\u0fb4\0\206\0\206\0\206"+
    "\0\206\0\206\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146"+
    "\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e"+
    "\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u01d5\0\u14ad\0\u01d5\0\u14f0"+
    "\0\u01d5\0\u1533\0\u1576\0\u15b9\0\u15fc\0\206\0\u163f\0\u1682"+
    "\0\u16c5\0\u0c0a\0\u0c4d\0\u1708\0\u174b\0\u01d5\0\u178e\0\u17d1"+
    "\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u01d5"+
    "\0\u19e9\0\u01d5\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u01d5"+
    "\0\u1b7b\0\u1bbe\0\u1c01\0\u01d5\0\u1c44\0\u1c87\0\u01d5\0\u1cca"+
    "\0\u1d0d\0\u01d5\0\u01d5\0\u1d50\0\u01d5\0\u01d5\0\u1d93\0\u16c5"+
    "\0\u1dd6\0\u1e19\0\u01d5\0\u1e5c\0\u01d5\0\u1e9f\0\u01d5\0\u01d5"+
    "\0\u01d5\0\206\0\u01d5\0\u01d5\0\u01d5\0\u1ee2\0\u1f25\0\u1f68"+
    "\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u01d5\0\u20fa\0\u01d5"+
    "\0\u213d\0\u2180\0\u21c3\0\u01d5\0\u01d5\0\u2206\0\u2249\0\u228c"+
    "\0\u22cf\0\u2312\0\u2355\0\u01d5\0\u2398\0\u01d5\0\u01d5\0\u23db"+
    "\0\u241e\0\u2461\0\u01d5\0\u24a4\0\u24e7\0\u01d5\0\u01d5\0\u252a"+
    "\0\u256d\0\u01d5\0\u01d5\0\u25b0\0\u01d5\0\u25f3\0\u01d5\0\u2636"+
    "\0\u2679\0\u01d5\0\u26bc\0\u26ff\0\u01d5\0\u2742\0\u2785\0\u01d5"+
    "\0\u01d5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\5\1\16\1\17\1\20\1\7"+
    "\1\21\1\22\1\23\1\13\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\13\1\40\1\41\1\13\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\13\1\50\1\51\1\52\1\13\1\53"+
    "\1\54\1\55\2\13\1\56\1\13\1\57\1\13\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\4\73\1\74\11\73\1\75\1\74\1\76"+
    "\62\73\104\0\1\77\1\13\3\0\7\13\6\0\1\13"+
    "\3\0\1\100\6\0\32\13\15\0\1\5\1\101\2\0"+
    "\2\5\3\0\1\5\1\102\71\0\1\103\104\0\1\10"+
    "\76\0\2\13\3\0\7\13\6\0\1\13\12\0\32\13"+
    "\15\0\1\5\1\101\2\0\2\5\1\104\1\0\1\105"+
    "\1\5\1\102\67\0\2\13\3\0\7\13\6\0\1\13"+
    "\12\0\5\13\1\106\1\107\3\13\1\110\1\13\1\111"+
    "\15\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\11\13\1\112\1\113\17\13\14\0\2\13\3\0\2\13"+
    "\1\114\4\13\6\0\1\13\12\0\1\13\1\115\3\13"+
    "\1\116\24\13\30\0\1\117\11\0\1\100\4\0\1\120"+
    "\64\0\1\121\64\0\4\22\1\122\12\22\1\123\63\22"+
    "\6\0\1\23\1\0\3\23\1\0\1\23\6\0\1\23"+
    "\12\0\32\23\15\0\1\124\3\0\7\124\1\0\1\125"+
    "\4\0\1\124\12\0\32\124\42\0\1\100\101\0\1\126"+
    "\1\100\102\0\1\127\102\0\1\100\2\0\1\130\77\0"+
    "\1\127\3\0\1\131\76\0\1\127\4\0\1\132\47\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\11\13\1\133"+
    "\20\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\12\13\1\134\1\13\1\135\15\13\14\0\2\13\3\0"+
    "\6\13\1\136\6\0\1\13\12\0\1\137\15\13\1\140"+
    "\13\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\5\13\1\141\4\13\1\142\17\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\1\13\1\143\1\13\1\144"+
    "\24\13\1\145\1\13\14\0\2\13\3\0\7\13\6\0"+
    "\1\13\12\0\6\13\1\146\23\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\6\13\1\147\3\13\1\150"+
    "\17\13\14\0\2\13\3\0\6\13\1\151\6\0\1\13"+
    "\12\0\32\13\14\0\2\13\3\0\7\13\6\0\1\13"+
    "\12\0\11\13\1\77\20\13\14\0\2\13\3\0\6\13"+
    "\1\152\6\0\1\13\12\0\32\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\6\13\1\153\2\13\1\154"+
    "\20\13\14\0\2\13\3\0\3\13\1\155\3\13\6\0"+
    "\1\13\12\0\1\13\1\156\1\13\1\157\26\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\1\160\31\13"+
    "\14\0\2\13\3\0\7\13\6\0\1\13\12\0\22\13"+
    "\1\161\7\13\14\0\2\13\3\0\7\13\6\0\1\13"+
    "\12\0\26\13\1\162\3\13\14\0\2\13\3\0\7\13"+
    "\6\0\1\13\12\0\24\13\1\163\5\13\14\0\2\13"+
    "\3\0\7\13\6\0\1\13\12\0\24\13\1\164\5\13"+
    "\14\0\2\13\3\0\7\13\6\0\1\13\12\0\31\13"+
    "\1\165\42\0\1\166\53\0\4\73\1\0\11\73\3\0"+
    "\62\73\16\0\1\167\66\0\1\170\3\0\2\170\3\0"+
    "\1\170\104\0\1\171\67\0\1\172\3\0\2\172\1\0"+
    "\4\172\23\0\1\172\1\0\1\172\1\0\1\172\44\0"+
    "\2\173\3\0\1\173\70\0\2\13\3\0\7\13\6\0"+
    "\1\13\12\0\12\13\1\174\17\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\5\13\1\175\24\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\11\13\1\176"+
    "\20\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\1\13\1\177\30\13\14\0\2\13\3\0\6\13\1\200"+
    "\6\0\1\13\12\0\32\13\14\0\2\13\3\0\7\13"+
    "\6\0\1\13\12\0\12\13\1\201\17\13\14\0\2\13"+
    "\3\0\7\13\6\0\1\13\12\0\1\202\31\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\14\13\1\203"+
    "\15\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\3\13\1\204\12\13\1\205\13\13\31\0\1\21\103\0"+
    "\1\123\65\0\1\124\3\0\7\124\6\0\1\124\12\0"+
    "\32\124\40\0\1\206\56\0\2\13\3\0\7\13\6\0"+
    "\1\13\12\0\14\13\1\207\15\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\1\210\31\13\14\0\2\13"+
    "\3\0\7\13\6\0\1\13\12\0\5\13\1\211\24\13"+
    "\14\0\2\13\3\0\7\13\6\0\1\13\12\0\1\212"+
    "\4\13\1\213\24\13\14\0\2\13\3\0\7\13\6\0"+
    "\1\13\12\0\6\13\1\214\23\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\13\13\1\215\16\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\6\13\1\216"+
    "\23\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\1\13\1\217\30\13\14\0\2\13\3\0\7\13\6\0"+
    "\1\13\12\0\2\13\1\220\27\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\3\13\1\221\26\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\6\13\1\222"+
    "\23\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\1\223\31\13\14\0\2\13\3\0\7\13\6\0\1\13"+
    "\12\0\11\13\1\224\20\13\14\0\2\13\3\0\7\13"+
    "\6\0\1\13\12\0\16\13\1\225\13\13\14\0\2\13"+
    "\3\0\7\13\6\0\1\13\12\0\1\226\31\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\1\227\31\13"+
    "\14\0\2\13\3\0\7\13\6\0\1\13\12\0\3\13"+
    "\1\230\26\13\14\0\2\13\3\0\6\13\1\231\6\0"+
    "\1\13\12\0\32\13\14\0\2\13\3\0\3\13\1\232"+
    "\3\13\6\0\1\13\12\0\1\233\31\13\14\0\2\13"+
    "\3\0\7\13\6\0\1\13\12\0\11\13\1\234\20\13"+
    "\14\0\2\13\3\0\7\13\6\0\1\13\12\0\27\13"+
    "\1\232\2\13\14\0\2\13\3\0\7\13\6\0\1\13"+
    "\12\0\25\13\1\235\4\13\14\0\2\13\3\0\7\13"+
    "\6\0\1\13\12\0\26\13\1\236\3\13\14\0\2\13"+
    "\3\0\7\13\6\0\1\13\12\0\16\13\1\237\13\13"+
    "\31\0\1\76\66\0\1\170\3\0\2\170\3\0\1\170"+
    "\1\102\70\0\1\240\4\0\1\240\3\0\1\240\70\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\6\13\1\241"+
    "\23\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\3\13\1\242\26\13\14\0\2\13\3\0\7\13\6\0"+
    "\1\13\12\0\4\13\1\243\25\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\6\13\1\244\23\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\5\13\1\245"+
    "\24\13\14\0\2\13\3\0\6\13\1\246\6\0\1\13"+
    "\12\0\32\13\14\0\2\13\3\0\7\13\6\0\1\13"+
    "\12\0\7\13\1\247\22\13\14\0\2\13\3\0\6\13"+
    "\1\250\6\0\1\13\12\0\32\13\14\0\2\13\3\0"+
    "\3\13\1\251\3\13\6\0\1\13\12\0\32\13\15\0"+
    "\2\206\2\0\7\206\1\0\1\252\4\0\1\206\12\0"+
    "\32\206\14\0\2\13\3\0\6\13\1\253\6\0\1\13"+
    "\12\0\32\13\14\0\2\13\3\0\7\13\6\0\1\13"+
    "\12\0\5\13\1\254\24\13\14\0\2\13\3\0\3\13"+
    "\1\255\3\13\6\0\1\13\12\0\32\13\14\0\2\13"+
    "\3\0\7\13\6\0\1\13\12\0\1\256\31\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\1\13\1\257"+
    "\30\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\3\13\1\260\26\13\14\0\2\13\3\0\7\13\6\0"+
    "\1\13\12\0\1\261\2\13\1\262\26\13\14\0\2\13"+
    "\3\0\6\13\1\263\6\0\1\13\12\0\32\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\16\13\1\264"+
    "\13\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\4\13\1\265\25\13\14\0\2\13\3\0\7\13\6\0"+
    "\1\13\12\0\2\13\1\266\27\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\14\13\1\267\15\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\3\13\1\270"+
    "\26\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\5\13\1\271\24\13\14\0\2\13\3\0\7\13\6\0"+
    "\1\13\12\0\16\13\1\272\13\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\5\13\1\273\24\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\1\274\31\13"+
    "\14\0\2\13\3\0\6\13\1\275\6\0\1\13\12\0"+
    "\32\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\20\13\1\276\11\13\14\0\2\13\3\0\7\13\6\0"+
    "\1\13\12\0\1\13\1\277\30\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\16\13\1\300\13\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\6\13\1\301"+
    "\23\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\3\13\1\302\26\13\14\0\2\13\3\0\7\13\6\0"+
    "\1\13\12\0\16\13\1\303\13\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\1\304\31\13\14\0\2\13"+
    "\3\0\7\13\6\0\1\13\12\0\11\13\1\305\20\13"+
    "\14\0\2\13\3\0\7\13\6\0\1\13\12\0\1\306"+
    "\31\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\31\13\1\307\14\0\2\13\3\0\7\13\6\0\1\13"+
    "\12\0\11\13\1\310\20\13\14\0\2\13\3\0\7\13"+
    "\6\0\1\13\12\0\12\13\1\311\17\13\14\0\2\13"+
    "\3\0\7\13\6\0\1\13\12\0\1\13\1\312\30\13"+
    "\14\0\2\13\3\0\6\13\1\313\6\0\1\13\12\0"+
    "\32\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\15\13\1\314\14\13\14\0\2\13\3\0\7\13\6\0"+
    "\1\13\12\0\2\13\1\315\27\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\4\13\1\316\25\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\5\13\1\317"+
    "\24\13\14\0\2\13\3\0\1\320\6\13\6\0\1\13"+
    "\12\0\32\13\14\0\2\13\3\0\7\13\6\0\1\13"+
    "\12\0\1\13\1\321\30\13\14\0\2\13\3\0\7\13"+
    "\6\0\1\13\12\0\1\322\31\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\1\13\1\323\30\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\6\13\1\324"+
    "\23\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\13\13\1\325\16\13\14\0\2\13\3\0\7\13\6\0"+
    "\1\13\12\0\12\13\1\326\17\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\3\13\1\327\26\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\1\13\1\330"+
    "\30\13\14\0\2\13\3\0\7\13\6\0\1\13\12\0"+
    "\14\13\1\331\15\13\14\0\2\13\3\0\7\13\6\0"+
    "\1\13\12\0\2\13\1\332\27\13\14\0\2\13\3\0"+
    "\7\13\6\0\1\13\12\0\16\13\1\333\13\13\14\0"+
    "\2\13\3\0\7\13\6\0\1\13\12\0\6\13\1\334"+
    "\23\13\14\0\2\13\3\0\6\13\1\335\6\0\1\13"+
    "\12\0\32\13\14\0\2\13\3\0\7\13\6\0\1\13"+
    "\12\0\1\13\1\336\30\13\14\0\2\13\3\0\7\13"+
    "\6\0\1\13\12\0\7\13\1\337\22\13\14\0\2\13"+
    "\3\0\7\13\6\0\1\13\12\0\1\340\31\13\14\0"+
    "\2\13\3\0\6\13\1\341\6\0\1\13\12\0\32\13"+
    "\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10184];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\3\1\1\11\11\1\1\11\36\1"+
    "\1\11\1\1\11\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\2\0\1\11\2\0\11\1\2\11\1\0\1\1"+
    "\1\11\1\1\1\0\5\11\33\1\1\11\1\0\1\1"+
    "\1\0\14\1\1\0\43\1\1\11\67\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    String oppening = "";
    int lastState = YYINITIAL;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GdLexerHighlighter(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL);
        return GdTypes.STRING;
            }  // fall though
            case 226: break;
            default:
              {
                return null;
              }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { continue;
            } 
            // fall through
          case 85: break;
          case 2: 
            { return GdTypes.BAD_CHARACTER;
            } 
            // fall through
          case 86: break;
          case 3: 
            { return GdTypes.OR;
            } 
            // fall through
          case 87: break;
          case 4: 
            { return GdTypes.NUMBER;
            } 
            // fall through
          case 88: break;
          case 5: 
            { return GdTypes.DOT;
            } 
            // fall through
          case 89: break;
          case 6: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 90: break;
          case 7: 
            { return GdTypes.UNDER;
            } 
            // fall through
          case 91: break;
          case 8: 
            { return GdTypes.IDENTIFIER;
            } 
            // fall through
          case 92: break;
          case 9: 
            { return GdTypes.MINUS;
            } 
            // fall through
          case 93: break;
          case 10: 
            { oppening = yytext().toString(); lastState = yystate(); yybegin(STRING);
            } 
            // fall through
          case 94: break;
          case 11: 
            { return GdTypes.COMMENT;
            } 
            // fall through
          case 95: break;
          case 12: 
            { return GdTypes.ANNOTATOR;
            } 
            // fall through
          case 96: break;
          case 13: 
            { return GdTypes.NODE_PATH_LEX;
            } 
            // fall through
          case 97: break;
          case 14: 
            { return GdTypes.MOD;
            } 
            // fall through
          case 98: break;
          case 15: 
            { return GdTypes.PLUS;
            } 
            // fall through
          case 99: break;
          case 16: 
            { return GdTypes.EQ;
            } 
            // fall through
          case 100: break;
          case 17: 
            { return GdTypes.MUL;
            } 
            // fall through
          case 101: break;
          case 18: 
            { return GdTypes.DIV;
            } 
            // fall through
          case 102: break;
          case 19: 
            { return GdTypes.AND;
            } 
            // fall through
          case 103: break;
          case 20: 
            { return GdTypes.TEST_OPERATOR;
            } 
            // fall through
          case 104: break;
          case 21: 
            { return GdTypes.NEGATE;
            } 
            // fall through
          case 105: break;
          case 22: 
            { return GdTypes.COMMA;
            } 
            // fall through
          case 106: break;
          case 23: 
            { return GdTypes.COLON;
            } 
            // fall through
          case 107: break;
          case 24: 
            { return GdTypes.SEMICON;
            } 
            // fall through
          case 108: break;
          case 25: 
            { return GdTypes.LRBR;
            } 
            // fall through
          case 109: break;
          case 26: 
            { return GdTypes.RRBR;
            } 
            // fall through
          case 110: break;
          case 27: 
            { return GdTypes.LSBR;
            } 
            // fall through
          case 111: break;
          case 28: 
            { return GdTypes.RSBR;
            } 
            // fall through
          case 112: break;
          case 29: 
            { return GdTypes.LCBR;
            } 
            // fall through
          case 113: break;
          case 30: 
            { return GdTypes.RCBR;
            } 
            // fall through
          case 114: break;
          case 31: 
            { return GdTypes.XOR;
            } 
            // fall through
          case 115: break;
          case 32: 
            { return GdTypes.NOT;
            } 
            // fall through
          case 116: break;
          case 33: 
            { if (!oppening.equals("\"\"\"")) {
            yybegin(lastState);
            return TokenType.BAD_CHARACTER;
        }
            } 
            // fall through
          case 117: break;
          case 34: 
            { if (oppening.equals(yytext().toString())) {
            yybegin(lastState);
            return GdTypes.STRING;
        }
            } 
            // fall through
          case 118: break;
          case 35: 
            { return GdTypes.OROR;
            } 
            // fall through
          case 119: break;
          case 36: 
            { return GdTypes.ASSIGN;
            } 
            // fall through
          case 120: break;
          case 37: 
            { return GdTypes.DOTDOT;
            } 
            // fall through
          case 121: break;
          case 38: 
            { return GdTypes.MMINUS;
            } 
            // fall through
          case 122: break;
          case 39: 
            { return GdTypes.RET;
            } 
            // fall through
          case 123: break;
          case 40: 
            { return GdTypes.PPLUS;
            } 
            // fall through
          case 124: break;
          case 41: 
            { return GdTypes.ANDAND;
            } 
            // fall through
          case 125: break;
          case 42: 
            { return GdTypes.LBSHIFT;
            } 
            // fall through
          case 126: break;
          case 43: 
            { return GdTypes.RBSHIFT;
            } 
            // fall through
          case 127: break;
          case 44: 
            { return GdTypes.AS;
            } 
            // fall through
          case 128: break;
          case 45: 
            { return GdTypes.IF;
            } 
            // fall through
          case 129: break;
          case 46: 
            { return GdTypes.IN;
            } 
            // fall through
          case 130: break;
          case 47: 
            { return GdTypes.IS;
            } 
            // fall through
          case 131: break;
          case 48: 
            { return GdTypes.PI;
            } 
            // fall through
          case 132: break;
          case 49: 
            { return GdTypes.CEQ;
            } 
            // fall through
          case 133: break;
          case 50: 
            { return GdTypes.FOR;
            } 
            // fall through
          case 134: break;
          case 51: 
            { return GdTypes.SET;
            } 
            // fall through
          case 135: break;
          case 52: 
            { return GdTypes.VAR;
            } 
            // fall through
          case 136: break;
          case 53: 
            { return GdTypes.GET;
            } 
            // fall through
          case 137: break;
          case 54: 
            { return GdTypes.INF;
            } 
            // fall through
          case 138: break;
          case 55: 
            { return GdTypes.INT;
            } 
            // fall through
          case 139: break;
          case 56: 
            { return GdTypes.TAU;
            } 
            // fall through
          case 140: break;
          case 57: 
            { return GdTypes.NAN;
            } 
            // fall through
          case 141: break;
          case 58: 
            { return GdTypes.FUNC;
            } 
            // fall through
          case 142: break;
          case 59: 
            { return GdTypes.BOOL;
            } 
            // fall through
          case 143: break;
          case 60: 
            { return GdTypes.ENUM;
            } 
            // fall through
          case 144: break;
          case 61: 
            { return GdTypes.ELSE;
            } 
            // fall through
          case 145: break;
          case 62: 
            { return GdTypes.ELIF;
            } 
            // fall through
          case 146: break;
          case 63: 
            { return GdTypes.TRUE;
            } 
            // fall through
          case 147: break;
          case 64: 
            { return GdTypes.NULL;
            } 
            // fall through
          case 148: break;
          case 65: 
            { return GdTypes.SELF;
            } 
            // fall through
          case 149: break;
          case 66: 
            { return GdTypes.VOID;
            } 
            // fall through
          case 150: break;
          case 67: 
            { return GdTypes.PASS;
            } 
            // fall through
          case 151: break;
          case 68: 
            { return GdTypes.FLOAT;
            } 
            // fall through
          case 152: break;
          case 69: 
            { return GdTypes.FALSE;
            } 
            // fall through
          case 153: break;
          case 70: 
            { return GdTypes.BREAK;
            } 
            // fall through
          case 154: break;
          case 71: 
            { return GdTypes.CONST;
            } 
            // fall through
          case 155: break;
          case 72: 
            { return GdTypes.AWAIT;
            } 
            // fall through
          case 156: break;
          case 73: 
            { return GdTypes.MATCH;
            } 
            // fall through
          case 157: break;
          case 74: 
            { return GdTypes.WHILE;
            } 
            // fall through
          case 158: break;
          case 75: 
            { return GdTypes.STATIC;
            } 
            // fall through
          case 159: break;
          case 76: 
            { return GdTypes.SIGNAL;
            } 
            // fall through
          case 160: break;
          case 77: 
            { return GdTypes.ASSERT;
            } 
            // fall through
          case 161: break;
          case 78: 
            { return GdTypes.RETURN;
            } 
            // fall through
          case 162: break;
          case 79: 
            { return GdTypes.STR;
            } 
            // fall through
          case 163: break;
          case 80: 
            { return GdTypes.EXTENDS;
            } 
            // fall through
          case 164: break;
          case 81: 
            { return GdTypes.PRELOAD;
            } 
            // fall through
          case 165: break;
          case 82: 
            { return GdTypes.CONTINUE;
            } 
            // fall through
          case 166: break;
          case 83: 
            { return GdTypes.BREAKPOINT;
            } 
            // fall through
          case 167: break;
          case 84: 
            { return GdTypes.CLASS_NAME;
            } 
            // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
