/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package gdscript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import gdscript.psi.GdTypes;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Gd.flex</tt>
 */
class GdLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int AWAIT_NEW_LINE = 2;
  public static final int AWAIT_NEW_LINE_ONCE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\7\2\10\1\4\22\0\1\5\1\26\1\6\1\11\1\0\1\21\1\22\1\0\1\66\1\67"+
    "\1\17\1\14\1\63\1\16\1\3\1\20\12\2\1\64\1\65\1\24\1\15\1\25\1\0\1\12\1\57"+
    "\4\13\1\62\2\13\1\55\4\13\1\61\1\13\1\54\2\13\1\51\1\56\1\60\5\13\3\0\1\70"+
    "\1\1\1\0\1\37\1\52\1\35\1\33\1\27\1\45\1\44\1\13\1\50\1\13\1\53\1\36\1\40"+
    "\1\32\1\41\1\47\1\13\1\43\1\34\1\31\1\46\1\42\1\13\1\30\2\13\1\0\1\23\1\0"+
    "\1\71\6\0\1\10\242\0\2\10\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\22\2\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\3\1\0"+
    "\1\34\2\7\1\35\1\36\1\21\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\13\2\1\45\6\2\1\46\1\47"+
    "\1\50\2\2\1\51\10\2\1\22\6\2\1\41\1\52"+
    "\5\2\1\53\2\2\1\54\1\55\1\56\1\2\1\57"+
    "\1\60\1\61\1\62\1\63\1\2\1\64\4\2\1\65"+
    "\2\2\1\66\1\67\7\2\1\70\1\2\1\71\1\2"+
    "\1\72\1\2\1\73\1\74\2\2\1\75\1\76\1\2"+
    "\1\77\4\2\1\100\3\2\1\101\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\256"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c"+
    "\0\u032c\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u02b8\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee"+
    "\0\u0828\0\256\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\256\0\u015c\0\u01d0\0\u01d0\0\u0862\0\256\0\256"+
    "\0\256\0\256\0\256\0\256\0\256\0\350\0\256\0\256"+
    "\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32"+
    "\0\u0a6c\0\u0aa6\0\u0ae0\0\350\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\350\0\350\0\u0cb0\0\u0cea\0\350"+
    "\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba"+
    "\0\350\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\350"+
    "\0\350\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\350\0\u1172"+
    "\0\u11ac\0\350\0\350\0\350\0\u11e6\0\350\0\350\0\350"+
    "\0\350\0\350\0\u1220\0\350\0\u125a\0\u1294\0\u12ce\0\u1308"+
    "\0\350\0\u1342\0\u137c\0\350\0\350\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\350\0\u154c\0\350\0\u1586"+
    "\0\u15c0\0\u15fa\0\350\0\350\0\u1634\0\u166e\0\350\0\350"+
    "\0\u16a8\0\350\0\u16e2\0\u171c\0\u1756\0\u1790\0\350\0\u17ca"+
    "\0\u1804\0\u183e\0\350\0\350";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\10"+
    "\1\4\1\13\1\14\1\5\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\5\1\31\1\32\1\5\1\33\1\34\1\5\1\35"+
    "\1\5\1\36\1\37\1\40\1\5\1\41\1\5\1\42"+
    "\1\43\1\44\1\45\1\5\1\46\1\47\1\50\2\5"+
    "\1\51\1\5\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\4\1\5\1\6\1\7\1\61\1\11\1\12"+
    "\1\61\1\4\1\13\1\14\1\5\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\5\1\31\1\32\1\5\1\33\1\34\1\5"+
    "\1\35\1\5\1\36\1\37\1\40\1\5\1\41\1\5"+
    "\1\42\1\43\1\44\1\45\1\5\1\46\1\47\1\50"+
    "\2\5\1\51\1\5\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\4\1\5\1\6\1\7\1\62\1\11"+
    "\1\12\1\62\1\4\1\13\1\14\1\5\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\5\1\31\1\32\1\5\1\33\1\34"+
    "\1\5\1\35\1\5\1\36\1\37\1\40\1\5\1\41"+
    "\1\5\1\42\1\43\1\44\1\45\1\5\1\46\1\47"+
    "\1\50\2\5\1\51\1\5\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\73\0\2\5\10\0\1\5\7\0"+
    "\1\5\3\0\34\5\11\0\1\6\1\63\70\0\1\63"+
    "\74\0\1\11\64\0\4\64\1\0\1\64\1\65\2\0"+
    "\61\64\4\13\1\66\2\13\1\67\62\13\13\0\1\14"+
    "\7\0\1\14\3\0\34\14\23\0\1\70\1\71\71\0"+
    "\1\72\71\0\1\71\1\73\6\0\1\74\61\0\1\71"+
    "\71\0\1\71\4\0\1\75\50\0\2\5\10\0\1\5"+
    "\1\0\1\71\5\0\1\76\3\0\34\5\24\0\1\72"+
    "\6\0\1\77\62\0\1\72\7\0\1\100\45\0\2\5"+
    "\10\0\1\5\7\0\1\5\3\0\1\5\1\101\5\5"+
    "\1\102\24\5\10\0\2\5\10\0\1\5\7\0\1\5"+
    "\3\0\12\5\1\103\1\5\1\104\17\5\10\0\2\5"+
    "\10\0\1\5\7\0\1\5\3\0\12\5\1\105\4\5"+
    "\1\106\14\5\10\0\2\5\10\0\1\5\7\0\1\5"+
    "\3\0\1\107\20\5\1\110\12\5\10\0\2\5\10\0"+
    "\1\5\7\0\1\5\3\0\7\5\1\111\2\5\1\112"+
    "\21\5\10\0\2\5\10\0\1\5\7\0\1\5\3\0"+
    "\3\5\1\113\1\5\1\114\26\5\10\0\2\5\10\0"+
    "\1\5\7\0\1\5\3\0\14\5\1\76\17\5\10\0"+
    "\2\5\10\0\1\5\7\0\1\5\3\0\10\5\1\115"+
    "\1\5\1\116\21\5\10\0\2\5\10\0\1\5\7\0"+
    "\1\5\3\0\1\117\33\5\10\0\2\5\10\0\1\5"+
    "\7\0\1\5\3\0\10\5\1\120\6\5\1\121\14\5"+
    "\10\0\2\5\10\0\1\5\7\0\1\5\3\0\10\5"+
    "\1\122\23\5\10\0\2\5\10\0\1\5\7\0\1\5"+
    "\3\0\3\5\1\123\1\5\1\124\10\5\1\125\15\5"+
    "\10\0\2\5\10\0\1\5\7\0\1\5\3\0\2\5"+
    "\1\126\31\5\10\0\2\5\10\0\1\5\7\0\1\5"+
    "\3\0\14\5\1\127\17\5\10\0\2\5\10\0\1\5"+
    "\7\0\1\5\3\0\26\5\1\130\5\5\10\0\2\5"+
    "\10\0\1\5\7\0\1\5\3\0\32\5\1\131\1\5"+
    "\10\0\2\5\10\0\1\5\7\0\1\5\3\0\30\5"+
    "\1\132\3\5\10\0\2\5\10\0\1\5\7\0\1\5"+
    "\3\0\30\5\1\133\3\5\16\0\1\67\63\0\2\5"+
    "\10\0\1\5\7\0\1\5\3\0\2\5\1\134\31\5"+
    "\10\0\2\5\10\0\1\5\7\0\1\5\3\0\5\5"+
    "\1\135\13\5\1\136\12\5\10\0\2\5\10\0\1\5"+
    "\7\0\1\5\3\0\12\5\1\137\21\5\10\0\2\5"+
    "\10\0\1\5\7\0\1\5\3\0\17\5\1\140\14\5"+
    "\10\0\2\5\10\0\1\5\7\0\1\5\3\0\2\5"+
    "\1\141\31\5\10\0\2\5\10\0\1\5\7\0\1\5"+
    "\3\0\7\5\1\142\24\5\10\0\2\5\10\0\1\5"+
    "\7\0\1\5\3\0\2\5\1\143\4\5\1\144\24\5"+
    "\10\0\2\5\10\0\1\5\7\0\1\5\3\0\15\5"+
    "\1\145\16\5\10\0\2\5\10\0\1\5\7\0\1\5"+
    "\3\0\10\5\1\146\23\5\10\0\2\5\10\0\1\5"+
    "\7\0\1\5\3\0\3\5\1\147\30\5\10\0\2\5"+
    "\10\0\1\5\7\0\1\5\3\0\4\5\1\150\27\5"+
    "\10\0\2\5\10\0\1\5\7\0\1\5\3\0\14\5"+
    "\1\151\17\5\10\0\2\5\10\0\1\5\7\0\1\5"+
    "\3\0\21\5\1\152\12\5\10\0\2\5\10\0\1\5"+
    "\7\0\1\5\3\0\2\5\1\153\31\5\10\0\2\5"+
    "\10\0\1\5\7\0\1\5\3\0\7\5\1\154\24\5"+
    "\10\0\2\5\10\0\1\5\7\0\1\5\3\0\3\5"+
    "\1\155\30\5\10\0\2\5\10\0\1\5\7\0\1\5"+
    "\3\0\5\5\1\156\26\5\10\0\2\5\10\0\1\5"+
    "\7\0\1\5\3\0\2\5\1\157\31\5\10\0\2\5"+
    "\10\0\1\5\7\0\1\5\3\0\14\5\1\160\17\5"+
    "\10\0\2\5\10\0\1\5\7\0\1\5\3\0\1\161"+
    "\33\5\10\0\2\5\10\0\1\5\7\0\1\5\3\0"+
    "\33\5\1\162\10\0\2\5\10\0\1\5\7\0\1\5"+
    "\3\0\31\5\1\163\2\5\10\0\2\5\10\0\1\5"+
    "\7\0\1\5\3\0\32\5\1\164\1\5\10\0\2\5"+
    "\10\0\1\5\7\0\1\5\3\0\1\165\33\5\10\0"+
    "\2\5\10\0\1\5\7\0\1\5\3\0\1\166\33\5"+
    "\10\0\2\5\10\0\1\5\7\0\1\5\3\0\16\5"+
    "\1\167\15\5\10\0\2\5\10\0\1\5\7\0\1\5"+
    "\3\0\7\5\1\170\24\5\10\0\2\5\10\0\1\5"+
    "\7\0\1\5\3\0\1\171\33\5\10\0\2\5\10\0"+
    "\1\5\7\0\1\5\3\0\7\5\1\172\24\5\10\0"+
    "\2\5\10\0\1\5\7\0\1\5\3\0\15\5\1\173"+
    "\16\5\10\0\2\5\10\0\1\5\7\0\1\5\3\0"+
    "\16\5\1\174\15\5\10\0\2\5\10\0\1\5\7\0"+
    "\1\5\3\0\3\5\1\175\30\5\10\0\2\5\10\0"+
    "\1\5\7\0\1\5\3\0\5\5\1\176\26\5\10\0"+
    "\2\5\10\0\1\5\7\0\1\5\3\0\2\5\1\177"+
    "\2\5\1\200\26\5\10\0\2\5\10\0\1\5\7\0"+
    "\1\5\3\0\4\5\1\201\27\5\10\0\2\5\10\0"+
    "\1\5\7\0\1\5\3\0\17\5\1\202\14\5\10\0"+
    "\2\5\10\0\1\5\7\0\1\5\3\0\5\5\1\203"+
    "\26\5\10\0\2\5\10\0\1\5\7\0\1\5\3\0"+
    "\6\5\1\204\25\5\10\0\2\5\10\0\1\5\7\0"+
    "\1\5\3\0\5\5\1\205\26\5\10\0\2\5\10\0"+
    "\1\5\7\0\1\5\3\0\21\5\1\206\12\5\10\0"+
    "\2\5\10\0\1\5\7\0\1\5\3\0\10\5\1\207"+
    "\23\5\10\0\2\5\10\0\1\5\7\0\1\5\3\0"+
    "\3\5\1\210\30\5\10\0\2\5\10\0\1\5\7\0"+
    "\1\5\3\0\1\211\33\5\10\0\2\5\10\0\1\5"+
    "\7\0\1\5\3\0\10\5\1\212\23\5\10\0\2\5"+
    "\10\0\1\5\7\0\1\5\3\0\5\5\1\213\26\5"+
    "\10\0\2\5\10\0\1\5\7\0\1\5\3\0\21\5"+
    "\1\214\12\5\10\0\2\5\10\0\1\5\7\0\1\5"+
    "\3\0\2\5\1\215\31\5\10\0\2\5\10\0\1\5"+
    "\7\0\1\5\3\0\14\5\1\216\17\5\10\0\2\5"+
    "\10\0\1\5\7\0\1\5\3\0\1\217\33\5\10\0"+
    "\2\5\10\0\1\5\7\0\1\5\3\0\3\5\1\220"+
    "\30\5\10\0\2\5\10\0\1\5\7\0\1\5\3\0"+
    "\24\5\1\221\7\5\10\0\2\5\10\0\1\5\7\0"+
    "\1\5\3\0\4\5\1\222\27\5\10\0\2\5\10\0"+
    "\1\5\7\0\1\5\3\0\2\5\1\223\31\5\10\0"+
    "\2\5\10\0\1\5\7\0\1\5\3\0\7\5\1\224"+
    "\24\5\10\0\1\225\1\5\10\0\1\5\7\0\1\5"+
    "\3\0\34\5\10\0\2\5\10\0\1\5\7\0\1\5"+
    "\3\0\3\5\1\226\30\5\10\0\2\5\10\0\1\5"+
    "\7\0\1\5\3\0\3\5\1\227\30\5\10\0\2\5"+
    "\10\0\1\5\7\0\1\5\3\0\15\5\1\230\16\5"+
    "\10\0\2\5\10\0\1\5\7\0\1\5\3\0\20\5"+
    "\1\231\13\5\10\0\2\5\10\0\1\5\7\0\1\5"+
    "\3\0\5\5\1\232\26\5\10\0\2\5\10\0\1\5"+
    "\7\0\1\5\3\0\3\5\1\233\30\5\10\0\2\5"+
    "\10\0\1\5\7\0\1\5\3\0\17\5\1\234\14\5"+
    "\10\0\2\5\10\0\1\5\7\0\1\5\3\0\12\5"+
    "\1\235\21\5\10\0\2\5\10\0\1\5\7\0\1\5"+
    "\3\0\10\5\1\236\23\5\10\0\2\5\10\0\1\5"+
    "\7\0\1\5\3\0\1\237\33\5\10\0\2\5\10\0"+
    "\1\5\7\0\1\5\3\0\21\5\1\240\12\5\10\0"+
    "\2\5\10\0\1\5\7\0\1\5\3\0\11\5\1\241"+
    "\22\5\10\0\2\5\10\0\1\5\7\0\1\5\3\0"+
    "\3\5\1\242\30\5\10\0\2\5\10\0\1\5\7\0"+
    "\1\5\3\0\1\243\33\5\10\0\2\5\10\0\1\5"+
    "\7\0\1\5\3\0\2\5\1\244\31\5\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6264];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\41\1\11\11\1\1\1\0"+
    "\2\1\7\11\1\1\2\11\144\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    boolean lineEnded = false;
    int indent = 0;
    Stack<Integer> indentSizes = new Stack<>();
    int yycolumn;

    public IElementType dedentRoot(IElementType type) {
        lineEnded = false;
        if (yycolumn > 0 || indent <= 0 || indentSizes.empty()) {
            return type;
        }

        dedent();
        yypushback(yylength());

        return GdTypes.DEDENT;
    }

    public boolean dedentSpaces() {
        if (indent <= 0 || indentSizes.empty()) { // For EOF rule
            return false;
        }

        dedent();

        if (indent > yylength()) {
            yypushback(yylength());
        }

        return true;
    }

    private void dedent() {
        indent = Math.max(0, indent - indentSizes.pop());
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GdLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
              {
                if (dedentSpaces()) {
        return GdTypes.DEDENT;
    } else {
        return null;
    }
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return GdTypes.BAD_CHARACTER;
            } 
            // fall through
          case 67: break;
          case 2: 
            { return dedentRoot(GdTypes.IDENTIFIER);
            } 
            // fall through
          case 68: break;
          case 3: 
            { return dedentRoot(GdTypes.NUMBER);
            } 
            // fall through
          case 69: break;
          case 4: 
            { return GdTypes.DOT;
            } 
            // fall through
          case 70: break;
          case 5: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 71: break;
          case 6: 
            { int spaces = yytext().length();
        if (yycolumn <= spaces) {
            if (spaces == 1) spaces = 0;

            if (spaces > indent) {
                indentSizes.push(spaces - indent);
                indent += spaces;
                return GdTypes.INDENT;
            } else if (indent > spaces) {
                dedentSpaces();
                return GdTypes.DEDENT;
            }
        }

        return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 72: break;
          case 7: 
            { return GdTypes.COMMENT;
            } 
            // fall through
          case 73: break;
          case 8: 
            { return GdTypes.ANNOTATOR;
            } 
            // fall through
          case 74: break;
          case 9: 
            { return GdTypes.PLUS;
            } 
            // fall through
          case 75: break;
          case 10: 
            { return GdTypes.EQ;
            } 
            // fall through
          case 76: break;
          case 11: 
            { return GdTypes.MINUS;
            } 
            // fall through
          case 77: break;
          case 12: 
            { return GdTypes.MUL;
            } 
            // fall through
          case 78: break;
          case 13: 
            { return GdTypes.DIV;
            } 
            // fall through
          case 79: break;
          case 14: 
            { return GdTypes.MOD;
            } 
            // fall through
          case 80: break;
          case 15: 
            { return GdTypes.AND;
            } 
            // fall through
          case 81: break;
          case 16: 
            { return GdTypes.OR;
            } 
            // fall through
          case 82: break;
          case 17: 
            { return GdTypes.TEST_OPERATOR;
            } 
            // fall through
          case 83: break;
          case 18: 
            { return GdTypes.NEGATE;
            } 
            // fall through
          case 84: break;
          case 19: 
            { return GdTypes.COMMA;
            } 
            // fall through
          case 85: break;
          case 20: 
            { return GdTypes.COLON;
            } 
            // fall through
          case 86: break;
          case 21: 
            { lineEnded = true; return GdTypes.SEMICON;
            } 
            // fall through
          case 87: break;
          case 22: 
            { return dedentRoot(GdTypes.LRBR);
            } 
            // fall through
          case 88: break;
          case 23: 
            { return dedentRoot(GdTypes.RRBR);
            } 
            // fall through
          case 89: break;
          case 24: 
            { return GdTypes.XOR;
            } 
            // fall through
          case 90: break;
          case 25: 
            { return GdTypes.NOT;
            } 
            // fall through
          case 91: break;
          case 26: 
            { if (!lineEnded) {
              lineEnded = true;
              return GdTypes.NEW_LINE;
          }
          return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 92: break;
          case 27: 
            { yybegin(YYINITIAL);
          if (lineEnded) { // For signal, etc.
              return TokenType.WHITE_SPACE;
          }
          return GdTypes.NEW_LINE;
            } 
            // fall through
          case 93: break;
          case 28: 
            { return dedentRoot(GdTypes.STRING);
            } 
            // fall through
          case 94: break;
          case 29: 
            { return dedentRoot(GdTypes.PPLUS);
            } 
            // fall through
          case 95: break;
          case 30: 
            { return GdTypes.ASSIGN;
            } 
            // fall through
          case 96: break;
          case 31: 
            { return dedentRoot(GdTypes.MMINUS);
            } 
            // fall through
          case 97: break;
          case 32: 
            { return GdTypes.RET;
            } 
            // fall through
          case 98: break;
          case 33: 
            { return GdTypes.ANDAND;
            } 
            // fall through
          case 99: break;
          case 34: 
            { return GdTypes.OROR;
            } 
            // fall through
          case 100: break;
          case 35: 
            { return GdTypes.LBSHIFT;
            } 
            // fall through
          case 101: break;
          case 36: 
            { return GdTypes.RBSHIFT;
            } 
            // fall through
          case 102: break;
          case 37: 
            { return GdTypes.AS;
            } 
            // fall through
          case 103: break;
          case 38: 
            { return GdTypes.IN;
            } 
            // fall through
          case 104: break;
          case 39: 
            { return GdTypes.IS;
            } 
            // fall through
          case 105: break;
          case 40: 
            { return GdTypes.IF;
            } 
            // fall through
          case 106: break;
          case 41: 
            { return dedentRoot(GdTypes.PI);
            } 
            // fall through
          case 107: break;
          case 42: 
            { yybegin(AWAIT_NEW_LINE_ONCE); return dedentRoot(GdTypes.VAR);
            } 
            // fall through
          case 108: break;
          case 43: 
            { return dedentRoot(GdTypes.INT);
            } 
            // fall through
          case 109: break;
          case 44: 
            { return dedentRoot(GdTypes.INF);
            } 
            // fall through
          case 110: break;
          case 45: 
            { return dedentRoot(GdTypes.TAU);
            } 
            // fall through
          case 111: break;
          case 46: 
            { return dedentRoot(GdTypes.NAN);
            } 
            // fall through
          case 112: break;
          case 47: 
            { return GdTypes.ELSE;
            } 
            // fall through
          case 113: break;
          case 48: 
            { return GdTypes.ELIF;
            } 
            // fall through
          case 114: break;
          case 49: 
            { yybegin(AWAIT_NEW_LINE_ONCE); return dedentRoot(GdTypes.TOOL);
            } 
            // fall through
          case 115: break;
          case 50: 
            { return dedentRoot(GdTypes.TRUE);
            } 
            // fall through
          case 116: break;
          case 51: 
            { return dedentRoot(GdTypes.NULL);
            } 
            // fall through
          case 117: break;
          case 52: 
            { return dedentRoot(GdTypes.SELF);
            } 
            // fall through
          case 118: break;
          case 53: 
            { return dedentRoot(GdTypes.VOID);
            } 
            // fall through
          case 119: break;
          case 54: 
            { yybegin(AWAIT_NEW_LINE); return dedentRoot(GdTypes.FUNC);
            } 
            // fall through
          case 120: break;
          case 55: 
            { return dedentRoot(GdTypes.PASS);
            } 
            // fall through
          case 121: break;
          case 56: 
            { yybegin(AWAIT_NEW_LINE_ONCE); return dedentRoot(GdTypes.CONST);
            } 
            // fall through
          case 122: break;
          case 57: 
            { return dedentRoot(GdTypes.FALSE);
            } 
            // fall through
          case 123: break;
          case 58: 
            { return dedentRoot(GdTypes.BREAK);
            } 
            // fall through
          case 124: break;
          case 59: 
            { return GdTypes.SETGET;
            } 
            // fall through
          case 125: break;
          case 60: 
            { yybegin(AWAIT_NEW_LINE_ONCE); return GdTypes.SIGNAL;
            } 
            // fall through
          case 126: break;
          case 61: 
            { return dedentRoot(GdTypes.RETURN);
            } 
            // fall through
          case 127: break;
          case 62: 
            { return dedentRoot(GdTypes.STR);
            } 
            // fall through
          case 128: break;
          case 63: 
            { yybegin(AWAIT_NEW_LINE_ONCE); return dedentRoot(GdTypes.EXTENDS);
            } 
            // fall through
          case 129: break;
          case 64: 
            { return dedentRoot(GdTypes.CONTINUE);
            } 
            // fall through
          case 130: break;
          case 65: 
            { yybegin(AWAIT_NEW_LINE_ONCE); return dedentRoot(GdTypes.CLASS_NAME);
            } 
            // fall through
          case 131: break;
          case 66: 
            { return dedentRoot(GdTypes.BREAKPOINT);
            } 
            // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
