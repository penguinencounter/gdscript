{
  parserClass="tscn.parser.TscnParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Tscn"
  psiImplClassSuffix="Impl"
  psiPackage="tscn.psi"
  psiImplPackage="tscn.psi.impl"

  elementTypeHolderClass="tscn.psi.TscnTypes"
  elementTypeClass="tscn.psi.TscnElementType"
  tokenTypeClass="tscn.psi.TscnTokenType"

  psiImplUtilClass="tscn.psi.TscnPsiUtils"

  extends(".*_header")=header

  tokens = [
    comment='regexp:;.*'
    bad_character='regexp:[\^]'
  ]
}

tscnfile ::= paragraph+
paragraph ::= header dataLine* {
    mixin="tscn.psi.impl.TscnParagraphElementImpl"
    stubClass="tscn.index.stub.TscnParagraphStub"
    elementTypeFactory="tscn.psi.impl.TscnParagraphElementType.getInstance"
}

header ::=
    scene_header
    | node_header
    | resource_header
    | connection_header
    | unknown_header

scene_header ::= LSBR GD_SCENE headerValue* RSBR
node_header ::= LSBR NODE headerValue* RSBR {
    methods=[getName getType getParentPath getNodePath isUniqueNameOwner getScriptResource hasScript getDirectParentPath getGroups]
    mixin="tscn.psi.impl.TscnNodeHeaderElementImpl"
    stubClass="tscn.index.stub.TscnNodeHeaderStub"
    elementTypeFactory="tscn.psi.impl.TscnNodeHeaderElementType.getInstance"
}
resource_header ::= LSBR EXT_RESOURCE headerValue* RSBR {
    methods=[getPath getType getId]
    mixin="tscn.psi.impl.TscnResourceHeaderElementImpl"
    stubClass="tscn.index.stub.TscnResourceHeaderStub"
    elementTypeFactory="tscn.psi.impl.TscnResourceHeaderElementType.getInstance"
}
connection_header ::= LSBR CONNECTION headerValue* RSBR {
    methods=[getFrom getTo getSignal getMethod]
    mixin="tscn.psi.impl.TscnConnectionHeaderElementImpl"
    stubClass="tscn.index.stub.TscnConnectionHeaderStub"
    elementTypeFactory="tscn.psi.impl.TscnConnectionHeaderElementType.getInstance"
}

unknown_header ::= LSBR IDENTIFIER headerValue* RSBR
headerValue ::= headerValue_nm EQ headerValue_val
headerValue_nm ::= IDENTIFIER // TODO _nm extend
headerValue_val ::= VALUE

dataLine ::= dataLine_nm EQ dataLine_value
dataLine_nm ::= IDENTIFIER // TODO _nm extend
dataLine_value ::= VALUE
